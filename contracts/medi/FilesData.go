// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package medi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// FilesDataABI is the input ABI used to generate the binding from.
const FilesDataABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getUploaderUuid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"fileType\",\"type\":\"bytes32\"}],\"name\":\"setFileType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"ownerUuid\",\"type\":\"bytes16\"}],\"name\":\"setOwnerUuid\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuperSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFileSignerUuidByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getOwnerUuid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getFileSignerSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"keccak256Hash\",\"type\":\"bytes32\"}],\"name\":\"getUuidByKeccak256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delSuper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUuidListSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"uploaderUuid\",\"type\":\"bytes16\"}],\"name\":\"setUploaderUuid\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUuidByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"ownerUuid\",\"type\":\"bytes16\"},{\"name\":\"uploaderUuid\",\"type\":\"bytes16\"},{\"name\":\"fileType\",\"type\":\"bytes32\"},{\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"},{\"name\":\"keccak256Hash\",\"type\":\"bytes32\"},{\"name\":\"sha256Hash\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"}],\"name\":\"setFileDesc\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFileSignDataByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSuperByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"delFile\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"userUuid\",\"type\":\"bytes16\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"addSign\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getSha256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getKeccak256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getFileType\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addSuper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getFileDesc\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[4]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sha256Hash\",\"type\":\"bytes32\"}],\"name\":\"getUuidBySha256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"easyCnsAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"ownerUuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"uploaderUuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"fileType\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"},{\"indexed\":false,\"name\":\"keccak256Hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"sha256Hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onAddFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"onDelFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"onSetActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"ownerUuid\",\"type\":\"bytes16\"}],\"name\":\"onSetOwnerUuid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"uploaderUuid\",\"type\":\"bytes16\"}],\"name\":\"onSetUploaderUuid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"fileType\",\"type\":\"bytes32\"}],\"name\":\"onSetFileType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"}],\"name\":\"onSetFileDesc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"userUuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"onAddSign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onSetTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"onAddSuper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"onDelSuper\",\"type\":\"event\"}]"

// FilesDataBin is the compiled bytecode used for deploying new contracts.
const FilesDataBin = `606060405234156200000d57fe5b60405160208062004d71833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6200008d81620000e36401000000000262004657176401000000009004565b15156200009a5760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5062000120565b6000600060008373ffffffffffffffffffffffffffffffffffffffff16141515156200010f5760006000fd5b823b90506000811191505b50919050565b614c4180620001306000396000f3006060604052361561015d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306e4dffd1461015f57806324716b55146101cc57806328360cdd1461020a5780632f682a601461024a578063343496211461029957806338fc1214146102bf5780633f7a52b6146103355780635b379418146103715780635cbccaea146103de5780635d8de8b31461042557806365f337f5146104835780636b303682146104b95780636c75a331146104df5780637c333c0a1461052e5780638180306214610588578063a06f2e4614610675578063a8ecd649146106d4578063ab013c2614610742578063ab594cf6146107a2578063af1e3afc146107d5578063b21124ef1461084a578063c66a814514610899578063c8c459b9146108e8578063e1e8637b14610937578063eedbe9151461096d578063fa04901f146109ea578063fe07283a14610a48575bfe5b341561016757fe5b61019060048080356fffffffffffffffffffffffffffffffff1916906020019091905050610a8f565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34156101d457fe5b61020860048080356fffffffffffffffffffffffffffffffff19169060200190919080351515906020019091905050610b4c565b005b341561021257fe5b61024860048080356fffffffffffffffffffffffffffffffff191690602001909190803560001916906020019091905050610c7c565b005b341561025257fe5b61029760048080356fffffffffffffffffffffffffffffffff19169060200190919080356fffffffffffffffffffffffffffffffff1916906020019091905050610e45565b005b34156102a157fe5b6102a961116f565b6040518082815260200191505060405180910390f35b34156102c757fe5b6102f960048080356fffffffffffffffffffffffffffffffff191690602001909190803590602001909190505061117d565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561033d57fe5b61036f60048080356fffffffffffffffffffffffffffffffff1916906020019091908035906020019091905050611282565b005b341561037957fe5b6103a260048080356fffffffffffffffffffffffffffffffff1916906020019091905050611405565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34156103e657fe5b61040f60048080356fffffffffffffffffffffffffffffffff19169060200190919050506114c2565b6040518082815260200191505060405180910390f35b341561042d57fe5b610447600480803560001916906020019091905050611565565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561048b57fe5b6104b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611636565b005b34156104c157fe5b6104c9611848565b6040518082815260200191505060405180910390f35b34156104e757fe5b61052c60048080356fffffffffffffffffffffffffffffffff19169060200190919080356fffffffffffffffffffffffffffffffff1916906020019091905050611856565b005b341561053657fe5b61054c6004808035906020019091905050611b80565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561059057fe5b61067360048080356fffffffffffffffffffffffffffffffff19169060200190919080356fffffffffffffffffffffffffffffffff19169060200190919080356fffffffffffffffffffffffffffffffff19169060200190919080356000191690602001909190806080019060048060200260405190810160405280929190826004602002808284378201915050505050919080356000191690602001909190803560001916906020019091908035600019169060200190919080356000191690602001909190803560ff16906020019091908035906020019091905050611bf0565b005b341561067d57fe5b6106d260048080356fffffffffffffffffffffffffffffffff19169060200190919080608001906004806020026040519081016040528092919082600460200280828437820191505050505091905050612bbf565b005b34156106dc57fe5b61070e60048080356fffffffffffffffffffffffffffffffff1916906020019091908035906020019091905050612da9565b6040518084600019166000191681526020018360001916600019168152602001828152602001935050505060405180910390f35b341561074a57fe5b6107606004808035906020019091905050612f5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107aa57fe5b6107d360048080356fffffffffffffffffffffffffffffffff1916906020019091905050612fb7565b005b34156107dd57fe5b61084860048080356fffffffffffffffffffffffffffffffff19169060200190919080356fffffffffffffffffffffffffffffffff1916906020019091908035600019169060200190919080356000191690602001909190803560ff16906020019091905050613220565b005b341561085257fe5b61087b60048080356fffffffffffffffffffffffffffffffff1916906020019091905050613a0a565b60405180826000191660001916815260200191505060405180910390f35b34156108a157fe5b6108ca60048080356fffffffffffffffffffffffffffffffff1916906020019091905050613aaa565b60405180826000191660001916815260200191505060405180910390f35b34156108f057fe5b61091960048080356fffffffffffffffffffffffffffffffff1916906020019091905050613b4a565b60405180826000191660001916815260200191505060405180910390f35b341561093f57fe5b61096b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613bea565b005b341561097557fe5b61099e60048080356fffffffffffffffffffffffffffffffff1916906020019091905050613da8565b60405180826004602002808383600083146109d8575b8051825260208311156109d8576020820191506020810190506020830392506109b4565b50505090500191505060405180910390f35b34156109f257fe5b610a0c600480803560001916906020019091905050613e8d565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3415610a5057fe5b610a7960048080356fffffffffffffffffffffffffffffffff1916906020019091905050613f5e565b6040518082815260200191505060405180910390f35b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515610ae85760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060010160009054906101000a90047001000000000000000000000000000000000291505b5b50919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610bad5750610bac33613ffe565b5b1515610bb95760006000fd5b8060086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f713e572bb47b301d3993c6d748aa8f43912b3e2864d1fd701e16e586fbb53905828260405180836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001821515151581526020019250505060405180910390a15b5b5050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610cdd5750610cdc33613ffe565b5b1515610ce95760006000fd5b8160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515610d405760006000fd5b600070010000000000000000000000000000000002836fffffffffffffffffffffffffffffffff191614158015610d7f57506000600102826000191614155b1515610d8b5760006000fd5b8160086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060020181600019169055507f0f5d2a1fd7e620b5060ef0c66774a0475af737bef138fc169dfa8aca450e3899838360405180836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200182600019166000191681526020019250505060405180910390a15b5b505b5050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ea65750610ea533613ffe565b5b1515610eb25760006000fd5b8160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515610f095760006000fd5b600070010000000000000000000000000000000002836fffffffffffffffffffffffffffffffff191614158015610f675750600070010000000000000000000000000000000002826fffffffffffffffffffffffffffffffff191614155b1515610f735760006000fd5b610f7b614078565b1515610f875760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eeded90836000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b151561104357fe5b6102c65a03f1151561105157fe5b5050506040518051905015156110675760006000fd5b8160086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160016101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055507f82e7473892dc1da52c17ad55ae9ce073d7e153c1313b43a75527e983c42f9c66838360405180836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019250505060405180910390a15b5b505b5050565b600060018054905090505b90565b60008260086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff1615156111d65760006000fd5b600083101580156111ee57506111eb846114c2565b83105b15156111fa5760006000fd5b60086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600d018381548110151561124357fe5b90600052602060002090600291828204019190066010025b9054906101000a90047001000000000000000000000000000000000291505b5b5092915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806112e357506112e233613ffe565b5b15156112ef5760006000fd5b8160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff1615156113465760006000fd5b600082141515156113575760006000fd5b8160086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600901819055507f50843b091ea0bec4b6ead7f725b4fcb769671b6948c77b9cd98b25ff2440d84c838360405180836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018281526020019250505060405180910390a15b5b505b5050565b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff16151561145e5760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160019054906101000a90047001000000000000000000000000000000000291505b5b50919050565b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff16151561151b5760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600d018054905091505b5b50919050565b60006008600060096000856000191660001916815260200190815260200160002060009054906101000a9004700100000000000000000000000000000000026fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff1615156115f55760006000fd5b60096000836000191660001916815260200190815260200160002060009054906101000a90047001000000000000000000000000000000000290505b919050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116975760006000fd5b6116a083613ffe565b15156116ac5760006000fd5b60009150600090505b600180549050811015611748576001818154811015156116d157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561173a5760019150611748565b5b80806001019150506116b5565b81151561175157fe5b60018181548110151561176057fe5b906000526020600020900160005b6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557f5561c1cda602083d14af2f0773152f273f6f9bf8feb17ce6265f94aec25bde0083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15b5b505050565b6000600b8054905090505b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118b757506118b633613ffe565b5b15156118c35760006000fd5b8160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff16151561191a5760006000fd5b600070010000000000000000000000000000000002836fffffffffffffffffffffffffffffffff1916141580156119785750600070010000000000000000000000000000000002826fffffffffffffffffffffffffffffffff191614155b15156119845760006000fd5b61198c614078565b15156119985760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eeded90836000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b1515611a5457fe5b6102c65a03f11515611a6257fe5b505050604051805190501515611a785760006000fd5b8160086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060010160006101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055507fd8aaf341152319250a5bbe3f879ed37a1710d2b5dfa9676f68e9bfb98e3de630838360405180836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019250505060405180910390a15b5b505b5050565b600060008210158015611b995750611b96611848565b82105b1515611ba55760006000fd5b600b82815481101515611bb457fe5b90600052602060002090600291828204019190066010025b9054906101000a90047001000000000000000000000000000000000290505b919050565b611bf86146d8565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c595750611c5833613ffe565b5b1515611c655760006000fd5b8b60086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff16151515611cbd5760006000fd5b6000700100000000000000000000000000000000028d6fffffffffffffffffffffffffffffffff191614158015611d1b57506000700100000000000000000000000000000000028c6fffffffffffffffffffffffffffffffff191614155b8015611d4e57506000700100000000000000000000000000000000028b6fffffffffffffffffffffffffffffffff191614155b8015611d62575060006001028a6000191614155b8015611d7657506000600102886000191614155b8015611d8a57506000600102876000191614155b8015611d9e57506000600102866000191614155b8015611db257506000600102856000191614155b8015611dbf575060008314155b1515611dcb5760006000fd5b611dd48d6142a1565b1515611de05760006000fd5b611de9876142f2565b1515611df55760006000fd5b611dfe8861435e565b1515611e0a5760006000fd5b8760001916876000191614151515611e225760006000fd5b611e2a614078565b1515611e365760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eeded908d6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b1515611ef257fe5b6102c65a03f11515611f0057fe5b505050604051805190501515611f165760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eeded908c6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b1515611fd257fe5b6102c65a03f11515611fe057fe5b505050604051805190501515611ff65760006000fd5b600070010000000000000000000000000000000002600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410f66e48d6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b15156120c757fe5b6102c65a03f115156120d557fe5b505050604051805190506fffffffffffffffffffffffffffffffff19161415156122c1576121016143ca565b151561210d5760006000fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eeded90600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410f66e48e6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b151561220757fe5b6102c65a03f1151561221557fe5b505050604051805190506000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b151561229c57fe5b6102c65a03f115156122aa57fe5b5050506040518051905015156122c05760006000fd5b5b600188858888604051806000526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001945050505050602060405160208103908084039060008661646e5a03f1151561233c57fe5b50506020604051035173ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d1ef2b78d6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b151561241757fe5b6102c65a03f1151561242557fe5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff161415156124525760006000fd5b60018260000190151590811515815250508b82602001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508a82604001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508982606001906000191690816000191681525050888260800181905250878260a001906000191690816000191681525050868260c001906000191690816000191681525050828260e001818152505081600860008f6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816fffffffffffffffffffffffffffffffff02191690837001000000000000000000000000000000009004021790555060408201518160010160006101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055506060820151816002019060001916905560808201518160030190600461261992919061478c565b5060a0820151816007019060001916905560c0820151816008019060001916905560e0820151816009015561010082015181600a0190805190602001906126619291906147d2565b5061012082015181600b01908051906020019061267f9291906147d2565b5061014082015181600c01908051906020019061269d929190614825565b5061016082015181600d0190805190602001906126bb9291906148cc565b50905050600860008e6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600a01805480600101828161270d91906149a2565b916000526020600020900160005b8890919091509060001916905550600860008e6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600b01805480600101828161277791906149a2565b916000526020600020900160005b8790919091509060001916905550600860008e6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600c0180548060010182816127e191906149ce565b91600052602060002090602091828204019190065b86909190916101000a81548160ff021916908360ff16021790555050600860008e6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600d0180548060010182816128609190614a08565b91600052602060002090600291828204019190066010025b8d909190916101000a8154816fffffffffffffffffffffffffffffffff021916908370010000000000000000000000000000000090040217905550506001600860008f6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600e0160008d6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508c600960008a6000191660001916815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055508c600a6000896000191660001916815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff021916908370010000000000000000000000000000000090040217905550600b80548060010182816129fc9190614a08565b91600052602060002090600291828204019190066010025b8f909190916101000a8154816fffffffffffffffffffffffffffffffff021916908370010000000000000000000000000000000090040217905550507fe5db0782a88ef1dd5e05dbcd66036151fdd928c04a041691230dff05e269440a8d8d8d8d8d8d8d8d8d8d8d604051808c6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001896000191660001916815260200188600460200280838360008314612b48575b805182526020831115612b4857602082019150602081019050602083039250612b24565b50505090500187600019166000191681526020018660001916600019168152602001856000191660001916815260200184600019166000191681526020018360ff1660ff1681526020018281526020019b50505050505050505050505060405180910390a15b5b505b505050505050505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612c205750612c1f33613ffe565b5b1515612c2c5760006000fd5b8160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515612c835760006000fd5b600070010000000000000000000000000000000002836fffffffffffffffffffffffffffffffff191614151515612cba5760006000fd5b8160086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600301906004612d05929190614a42565b507f62c9cfebd42861a16451b2ce63bf3d3e5bcdb62acbc46482d52d0c48d34eb9b3838360405180836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200182600460200280838360008314612d8f575b805182526020831115612d8f57602082019150602081019050602083039250612d6b565b5050509050019250505060405180910390a15b5b505b5050565b6000600060008460086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515612e065760006000fd5b60008510158015612e1e5750612e1b866114c2565b85105b1515612e2a5760006000fd5b60086000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600a0185815481101515612e7357fe5b906000526020600020900160005b505460086000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600b0186815481101515612ecc57fe5b906000526020600020900160005b505460086000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600c0187815481101515612f2557fe5b90600052602060002090602091828204019190065b9054906101000a900460ff168060ff1690509350935093505b5b509250925092565b6000612f67826145f3565b1515612f735760006000fd5b600182815481101515612f8257fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613018575061301733613ffe565b5b15156130245760006000fd5b8060086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff16151561307b5760006000fd5b6009600060086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600701546000191660001916815260200190815260200160002060006101000a8154906fffffffffffffffffffffffffffffffff0219169055600a600060086000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600801546000191660001916815260200190815260200160002060006101000a8154906fffffffffffffffffffffffffffffffff0219169055600060086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f5084265f9b0b758e57a9c7d957106776471ed835d7267fb54d933927a3481bfd8260405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390a15b5b505b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613281575061328033613ffe565b5b151561328d5760006000fd5b8460086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff1615156132e45760006000fd5b600070010000000000000000000000000000000002866fffffffffffffffffffffffffffffffff1916141580156133425750600070010000000000000000000000000000000002856fffffffffffffffffffffffffffffffff191614155b801561335657506000600102846000191614155b801561336a57506000600102836000191614155b15156133765760006000fd5b60086000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600e016000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff161515156134045760006000fd5b61340c614078565b15156134185760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eeded90866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b15156134d457fe5b6102c65a03f115156134e257fe5b5050506040518051905015156134f85760006000fd5b600160086000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060070154838686604051806000526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001945050505050602060405160208103908084039060008661646e5a03f115156135af57fe5b50506020604051035173ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d1ef2b7876000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001915050602060405180830381600087803b151561368a57fe5b6102c65a03f1151561369857fe5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff161415156136c55760006000fd5b60086000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600a01805480600101828161371391906149a2565b916000526020600020900160005b869091909150906000191690555060086000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600b01805480600101828161377d91906149a2565b916000526020600020900160005b859091909150906000191690555060086000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600c0180548060010182816137e791906149ce565b91600052602060002090602091828204019190065b84909190916101000a81548160ff021916908360ff1602179055505060086000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600d0180548060010182816138669190614a08565b91600052602060002090600291828204019190066010025b87909190916101000a8154816fffffffffffffffffffffffffffffffff02191690837001000000000000000000000000000000009004021790555050600160086000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600e016000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055507fb6d8f3f2b7e44359d0f3577f248b9a9b8e6c275f3c9b6752d9c6905a0d18a2ac868686868660405180866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001846000191660001916815260200183600019166000191681526020018260ff1660ff1681526020019550505050505060405180910390a15b5b505b5050505050565b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515613a635760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206008015491505b5b50919050565b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515613b035760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206007015491505b5b50919050565b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515613ba35760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206002015491505b5b50919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613c475760006000fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515613c6e5760006000fd5b613c7781613ffe565b151515613c845760006000fd5b60018054806001018281613c989190614a88565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f920999c03a7fd19172e4c657c22aa62a1bfb5e027a8cf6a2a0ee9daf4c5a347481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15b5b50565b613db0614ab4565b8160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515613e075760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600301600480602002604051908101604052809291908260048015613e7e576020028201915b81546000191681526020019060010190808311613e66575b505050505091505b5b50919050565b600060086000600a6000856000191660001916815260200190815260200160002060009054906101000a9004700100000000000000000000000000000000026fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515613f1d5760006000fd5b600a6000836000191660001916815260200190815260200160002060009054906101000a90047001000000000000000000000000000000000290505b919050565b60008160086000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900460ff161515613fb75760006000fd5b60086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206009015491505b5b50919050565b600060008273ffffffffffffffffffffffffffffffffffffffff16141580156140705750600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b90505b919050565b60006000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6140c2614612565b6000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314614145575b80518252602083111561414557602082019150602081019050602083039250614121565b505050905090810190601f1680156141715780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561418c57fe5b6102c65a03f1151561419a57fe5b5050506040518051905090506141af81614657565b15156141be576000915061429d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156142985780600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600191505b5090565b6000600060010260086000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060070154600019161490505b919050565b6000600070010000000000000000000000000000000002600a6000846000191660001916815260200190815260200160002060009054906101000a9004700100000000000000000000000000000000026fffffffffffffffffffffffffffffffff19161490505b919050565b600060007001000000000000000000000000000000000260096000846000191660001916815260200190815260200160002060009054906101000a9004700100000000000000000000000000000000026fffffffffffffffffffffffffffffffff19161490505b919050565b60006000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e614414614693565b6000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314614497575b80518252602083111561449757602082019150602081019050602083039250614473565b505050905090810190601f1680156144c35780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156144de57fe5b6102c65a03f115156144ec57fe5b50505060405180519050905061450181614657565b151561451057600091506145ef565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156145ea5780600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600191505b5090565b60006000821015801561460a575060018054905082105b90505b919050565b61461a614ae0565b604060405190810160405280600981526020017f557365727344617461000000000000000000000000000000000000000000000081525090505b90565b6000600060008373ffffffffffffffffffffffffffffffffffffffff16141515156146825760006000fd5b823b90506000811191505b50919050565b61469b614ae0565b604060405190810160405280600881526020017f4f7267734461746100000000000000000000000000000000000000000000000081525090505b90565b6101e06040519081016040528060001515815260200160006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff191681526020016000600019168152602001614735614af4565b8152602001600060001916815260200160006000191681526020016000815260200161475f614b20565b815260200161476c614b20565b8152602001614779614b34565b8152602001614786614b48565b81525090565b82600481019282156147c1579160200282015b828111156147c057825182906000191690559160200191906001019061479f565b5b5090506147ce9190614b5c565b5090565b828054828255906000526020600020908101928215614814579160200282015b828111156148135782518290600019169055916020019190600101906147f2565b5b5090506148219190614b5c565b5090565b82805482825590600052602060002090601f016020900481019282156148bb5791602002820160005b8382111561488c57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261484e565b80156148b95782816101000a81549060ff021916905560010160208160000104928301926001030261488c565b505b5090506148c89190614b81565b5090565b828054828255906000526020600020906001016002900481019282156149915791602002820160005b8382111561495357835183826101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055509260200192601001602081600f010492830192600103026148f5565b801561498f5782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f01049283019260010302614953565b505b50905061499e9190614bb1565b5090565b8154818355818115116149c9578183600052602060002091820191016149c89190614b5c565b5b505050565b815481835581811511614a0357601f016020900481601f01602090048360005260206000209182019101614a029190614bf0565b5b505050565b815481835581811511614a3d576001016002900481600101600290048360005260206000209182019101614a3c9190614bf0565b5b505050565b8260048101928215614a77579160200282015b82811115614a76578251829060001916905591602001919060010190614a55565b5b509050614a849190614b5c565b5090565b815481835581811511614aaf57818360005260206000209182019101614aae9190614bf0565b5b505050565b6080604051908101604052806004905b600060001916815260200190600190039081614ac45790505090565b602060405190810160405280600081525090565b6080604051908101604052806004905b600060001916815260200190600190039081614b045790505090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b614b7e91905b80821115614b7a576000816000905550600101614b62565b5090565b90565b614bae91905b80821115614baa57600081816101000a81549060ff021916905550600101614b87565b5090565b90565b614bed91905b80821115614be957600081816101000a8154906fffffffffffffffffffffffffffffffff021916905550600101614bb7565b5090565b90565b614c1291905b80821115614c0e576000816000905550600101614bf6565b5090565b905600a165627a7a72305820cab6af5d671eb064ae4978ca4a09c174edea7d7f7508cf2b17b581f1a7824ab10029`

// DeployFilesData deploys a new Ethereum contract, binding an instance of FilesData to it.
func DeployFilesData(auth *bind.TransactOpts, backend bind.ContractBackend, easyCnsAddress common.Address) (common.Address, *types.Transaction, *FilesData, error) {
	parsed, err := abi.JSON(strings.NewReader(FilesDataABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FilesDataBin), backend, easyCnsAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FilesData{FilesDataCaller: FilesDataCaller{contract: contract}, FilesDataTransactor: FilesDataTransactor{contract: contract}, FilesDataFilterer: FilesDataFilterer{contract: contract}}, nil
}

// FilesData is an auto generated Go binding around an Ethereum contract.
type FilesData struct {
	FilesDataCaller     // Read-only binding to the contract
	FilesDataTransactor // Write-only binding to the contract
	FilesDataFilterer   // Log filterer for contract events
}

// FilesDataCaller is an auto generated read-only Go binding around an Ethereum contract.
type FilesDataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesDataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FilesDataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesDataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FilesDataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesDataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FilesDataSession struct {
	Contract     *FilesData        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FilesDataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FilesDataCallerSession struct {
	Contract *FilesDataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// FilesDataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FilesDataTransactorSession struct {
	Contract     *FilesDataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FilesDataRaw is an auto generated low-level Go binding around an Ethereum contract.
type FilesDataRaw struct {
	Contract *FilesData // Generic contract binding to access the raw methods on
}

// FilesDataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FilesDataCallerRaw struct {
	Contract *FilesDataCaller // Generic read-only contract binding to access the raw methods on
}

// FilesDataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FilesDataTransactorRaw struct {
	Contract *FilesDataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFilesData creates a new instance of FilesData, bound to a specific deployed contract.
func NewFilesData(address common.Address, backend bind.ContractBackend) (*FilesData, error) {
	contract, err := bindFilesData(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FilesData{FilesDataCaller: FilesDataCaller{contract: contract}, FilesDataTransactor: FilesDataTransactor{contract: contract}, FilesDataFilterer: FilesDataFilterer{contract: contract}}, nil
}

// NewFilesDataCaller creates a new read-only instance of FilesData, bound to a specific deployed contract.
func NewFilesDataCaller(address common.Address, caller bind.ContractCaller) (*FilesDataCaller, error) {
	contract, err := bindFilesData(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FilesDataCaller{contract: contract}, nil
}

// NewFilesDataTransactor creates a new write-only instance of FilesData, bound to a specific deployed contract.
func NewFilesDataTransactor(address common.Address, transactor bind.ContractTransactor) (*FilesDataTransactor, error) {
	contract, err := bindFilesData(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FilesDataTransactor{contract: contract}, nil
}

// NewFilesDataFilterer creates a new log filterer instance of FilesData, bound to a specific deployed contract.
func NewFilesDataFilterer(address common.Address, filterer bind.ContractFilterer) (*FilesDataFilterer, error) {
	contract, err := bindFilesData(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FilesDataFilterer{contract: contract}, nil
}

// bindFilesData binds a generic wrapper to an already deployed contract.
func bindFilesData(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FilesDataABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FilesData *FilesDataRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _FilesData.Contract.FilesDataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FilesData *FilesDataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FilesData.Contract.FilesDataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FilesData *FilesDataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FilesData.Contract.FilesDataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FilesData *FilesDataCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _FilesData.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FilesData *FilesDataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FilesData.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FilesData *FilesDataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FilesData.Contract.contract.Transact(opts, method, params...)
}

// GetFileDesc is a free data retrieval call binding the contract method 0xeedbe915.
//
// Solidity: function getFileDesc(uuid bytes16) constant returns(bytes32[4])
func (_FilesData *FilesDataCaller) GetFileDesc(opts *bind.CallOpts, uuid [16]byte) ([4][32]byte, error) {
	var (
		ret0 = new([4][32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileDesc", uuid)
	return *ret0, err
}

// GetFileDesc is a free data retrieval call binding the contract method 0xeedbe915.
//
// Solidity: function getFileDesc(uuid bytes16) constant returns(bytes32[4])
func (_FilesData *FilesDataSession) GetFileDesc(uuid [16]byte) ([4][32]byte, error) {
	return _FilesData.Contract.GetFileDesc(&_FilesData.CallOpts, uuid)
}

// GetFileDesc is a free data retrieval call binding the contract method 0xeedbe915.
//
// Solidity: function getFileDesc(uuid bytes16) constant returns(bytes32[4])
func (_FilesData *FilesDataCallerSession) GetFileDesc(uuid [16]byte) ([4][32]byte, error) {
	return _FilesData.Contract.GetFileDesc(&_FilesData.CallOpts, uuid)
}

// GetFileSignDataByIndex is a free data retrieval call binding the contract method 0xa8ecd649.
//
// Solidity: function getFileSignDataByIndex(uuid bytes16, index uint256) constant returns(bytes32, bytes32, uint256)
func (_FilesData *FilesDataCaller) GetFileSignDataByIndex(opts *bind.CallOpts, uuid [16]byte, index *big.Int) ([32]byte, [32]byte, *big.Int, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new([32]byte)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _FilesData.contract.Call(opts, out, "getFileSignDataByIndex", uuid, index)
	return *ret0, *ret1, *ret2, err
}

// GetFileSignDataByIndex is a free data retrieval call binding the contract method 0xa8ecd649.
//
// Solidity: function getFileSignDataByIndex(uuid bytes16, index uint256) constant returns(bytes32, bytes32, uint256)
func (_FilesData *FilesDataSession) GetFileSignDataByIndex(uuid [16]byte, index *big.Int) ([32]byte, [32]byte, *big.Int, error) {
	return _FilesData.Contract.GetFileSignDataByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileSignDataByIndex is a free data retrieval call binding the contract method 0xa8ecd649.
//
// Solidity: function getFileSignDataByIndex(uuid bytes16, index uint256) constant returns(bytes32, bytes32, uint256)
func (_FilesData *FilesDataCallerSession) GetFileSignDataByIndex(uuid [16]byte, index *big.Int) ([32]byte, [32]byte, *big.Int, error) {
	return _FilesData.Contract.GetFileSignDataByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileSignerSize is a free data retrieval call binding the contract method 0x5cbccaea.
//
// Solidity: function getFileSignerSize(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCaller) GetFileSignerSize(opts *bind.CallOpts, uuid [16]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileSignerSize", uuid)
	return *ret0, err
}

// GetFileSignerSize is a free data retrieval call binding the contract method 0x5cbccaea.
//
// Solidity: function getFileSignerSize(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataSession) GetFileSignerSize(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetFileSignerSize(&_FilesData.CallOpts, uuid)
}

// GetFileSignerSize is a free data retrieval call binding the contract method 0x5cbccaea.
//
// Solidity: function getFileSignerSize(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetFileSignerSize(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetFileSignerSize(&_FilesData.CallOpts, uuid)
}

// GetFileSignerUuidByIndex is a free data retrieval call binding the contract method 0x38fc1214.
//
// Solidity: function getFileSignerUuidByIndex(uuid bytes16, index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetFileSignerUuidByIndex(opts *bind.CallOpts, uuid [16]byte, index *big.Int) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileSignerUuidByIndex", uuid, index)
	return *ret0, err
}

// GetFileSignerUuidByIndex is a free data retrieval call binding the contract method 0x38fc1214.
//
// Solidity: function getFileSignerUuidByIndex(uuid bytes16, index uint256) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetFileSignerUuidByIndex(uuid [16]byte, index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetFileSignerUuidByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileSignerUuidByIndex is a free data retrieval call binding the contract method 0x38fc1214.
//
// Solidity: function getFileSignerUuidByIndex(uuid bytes16, index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetFileSignerUuidByIndex(uuid [16]byte, index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetFileSignerUuidByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileType is a free data retrieval call binding the contract method 0xc8c459b9.
//
// Solidity: function getFileType(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCaller) GetFileType(opts *bind.CallOpts, uuid [16]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileType", uuid)
	return *ret0, err
}

// GetFileType is a free data retrieval call binding the contract method 0xc8c459b9.
//
// Solidity: function getFileType(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataSession) GetFileType(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetFileType(&_FilesData.CallOpts, uuid)
}

// GetFileType is a free data retrieval call binding the contract method 0xc8c459b9.
//
// Solidity: function getFileType(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCallerSession) GetFileType(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetFileType(&_FilesData.CallOpts, uuid)
}

// GetKeccak256Hash is a free data retrieval call binding the contract method 0xc66a8145.
//
// Solidity: function getKeccak256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCaller) GetKeccak256Hash(opts *bind.CallOpts, uuid [16]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getKeccak256Hash", uuid)
	return *ret0, err
}

// GetKeccak256Hash is a free data retrieval call binding the contract method 0xc66a8145.
//
// Solidity: function getKeccak256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataSession) GetKeccak256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetKeccak256Hash(&_FilesData.CallOpts, uuid)
}

// GetKeccak256Hash is a free data retrieval call binding the contract method 0xc66a8145.
//
// Solidity: function getKeccak256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCallerSession) GetKeccak256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetKeccak256Hash(&_FilesData.CallOpts, uuid)
}

// GetOwnerUuid is a free data retrieval call binding the contract method 0x5b379418.
//
// Solidity: function getOwnerUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetOwnerUuid(opts *bind.CallOpts, uuid [16]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getOwnerUuid", uuid)
	return *ret0, err
}

// GetOwnerUuid is a free data retrieval call binding the contract method 0x5b379418.
//
// Solidity: function getOwnerUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetOwnerUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetOwnerUuid(&_FilesData.CallOpts, uuid)
}

// GetOwnerUuid is a free data retrieval call binding the contract method 0x5b379418.
//
// Solidity: function getOwnerUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetOwnerUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetOwnerUuid(&_FilesData.CallOpts, uuid)
}

// GetSha256Hash is a free data retrieval call binding the contract method 0xb21124ef.
//
// Solidity: function getSha256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCaller) GetSha256Hash(opts *bind.CallOpts, uuid [16]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getSha256Hash", uuid)
	return *ret0, err
}

// GetSha256Hash is a free data retrieval call binding the contract method 0xb21124ef.
//
// Solidity: function getSha256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataSession) GetSha256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetSha256Hash(&_FilesData.CallOpts, uuid)
}

// GetSha256Hash is a free data retrieval call binding the contract method 0xb21124ef.
//
// Solidity: function getSha256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCallerSession) GetSha256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetSha256Hash(&_FilesData.CallOpts, uuid)
}

// GetSuperByIndex is a free data retrieval call binding the contract method 0xab013c26.
//
// Solidity: function getSuperByIndex(index uint256) constant returns(address)
func (_FilesData *FilesDataCaller) GetSuperByIndex(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getSuperByIndex", index)
	return *ret0, err
}

// GetSuperByIndex is a free data retrieval call binding the contract method 0xab013c26.
//
// Solidity: function getSuperByIndex(index uint256) constant returns(address)
func (_FilesData *FilesDataSession) GetSuperByIndex(index *big.Int) (common.Address, error) {
	return _FilesData.Contract.GetSuperByIndex(&_FilesData.CallOpts, index)
}

// GetSuperByIndex is a free data retrieval call binding the contract method 0xab013c26.
//
// Solidity: function getSuperByIndex(index uint256) constant returns(address)
func (_FilesData *FilesDataCallerSession) GetSuperByIndex(index *big.Int) (common.Address, error) {
	return _FilesData.Contract.GetSuperByIndex(&_FilesData.CallOpts, index)
}

// GetSuperSize is a free data retrieval call binding the contract method 0x34349621.
//
// Solidity: function getSuperSize() constant returns(uint256)
func (_FilesData *FilesDataCaller) GetSuperSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getSuperSize")
	return *ret0, err
}

// GetSuperSize is a free data retrieval call binding the contract method 0x34349621.
//
// Solidity: function getSuperSize() constant returns(uint256)
func (_FilesData *FilesDataSession) GetSuperSize() (*big.Int, error) {
	return _FilesData.Contract.GetSuperSize(&_FilesData.CallOpts)
}

// GetSuperSize is a free data retrieval call binding the contract method 0x34349621.
//
// Solidity: function getSuperSize() constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetSuperSize() (*big.Int, error) {
	return _FilesData.Contract.GetSuperSize(&_FilesData.CallOpts)
}

// GetTime is a free data retrieval call binding the contract method 0xfe07283a.
//
// Solidity: function getTime(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCaller) GetTime(opts *bind.CallOpts, uuid [16]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getTime", uuid)
	return *ret0, err
}

// GetTime is a free data retrieval call binding the contract method 0xfe07283a.
//
// Solidity: function getTime(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataSession) GetTime(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetTime(&_FilesData.CallOpts, uuid)
}

// GetTime is a free data retrieval call binding the contract method 0xfe07283a.
//
// Solidity: function getTime(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetTime(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetTime(&_FilesData.CallOpts, uuid)
}

// GetUploaderUuid is a free data retrieval call binding the contract method 0x06e4dffd.
//
// Solidity: function getUploaderUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUploaderUuid(opts *bind.CallOpts, uuid [16]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUploaderUuid", uuid)
	return *ret0, err
}

// GetUploaderUuid is a free data retrieval call binding the contract method 0x06e4dffd.
//
// Solidity: function getUploaderUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUploaderUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUploaderUuid(&_FilesData.CallOpts, uuid)
}

// GetUploaderUuid is a free data retrieval call binding the contract method 0x06e4dffd.
//
// Solidity: function getUploaderUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUploaderUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUploaderUuid(&_FilesData.CallOpts, uuid)
}

// GetUuidByIndex is a free data retrieval call binding the contract method 0x7c333c0a.
//
// Solidity: function getUuidByIndex(index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUuidByIndex(opts *bind.CallOpts, index *big.Int) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidByIndex", index)
	return *ret0, err
}

// GetUuidByIndex is a free data retrieval call binding the contract method 0x7c333c0a.
//
// Solidity: function getUuidByIndex(index uint256) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUuidByIndex(index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByIndex(&_FilesData.CallOpts, index)
}

// GetUuidByIndex is a free data retrieval call binding the contract method 0x7c333c0a.
//
// Solidity: function getUuidByIndex(index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUuidByIndex(index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByIndex(&_FilesData.CallOpts, index)
}

// GetUuidByKeccak256Hash is a free data retrieval call binding the contract method 0x5d8de8b3.
//
// Solidity: function getUuidByKeccak256Hash(keccak256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUuidByKeccak256Hash(opts *bind.CallOpts, keccak256Hash [32]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidByKeccak256Hash", keccak256Hash)
	return *ret0, err
}

// GetUuidByKeccak256Hash is a free data retrieval call binding the contract method 0x5d8de8b3.
//
// Solidity: function getUuidByKeccak256Hash(keccak256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUuidByKeccak256Hash(keccak256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByKeccak256Hash(&_FilesData.CallOpts, keccak256Hash)
}

// GetUuidByKeccak256Hash is a free data retrieval call binding the contract method 0x5d8de8b3.
//
// Solidity: function getUuidByKeccak256Hash(keccak256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUuidByKeccak256Hash(keccak256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByKeccak256Hash(&_FilesData.CallOpts, keccak256Hash)
}

// GetUuidBySha256Hash is a free data retrieval call binding the contract method 0xfa04901f.
//
// Solidity: function getUuidBySha256Hash(sha256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUuidBySha256Hash(opts *bind.CallOpts, sha256Hash [32]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidBySha256Hash", sha256Hash)
	return *ret0, err
}

// GetUuidBySha256Hash is a free data retrieval call binding the contract method 0xfa04901f.
//
// Solidity: function getUuidBySha256Hash(sha256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUuidBySha256Hash(sha256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidBySha256Hash(&_FilesData.CallOpts, sha256Hash)
}

// GetUuidBySha256Hash is a free data retrieval call binding the contract method 0xfa04901f.
//
// Solidity: function getUuidBySha256Hash(sha256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUuidBySha256Hash(sha256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidBySha256Hash(&_FilesData.CallOpts, sha256Hash)
}

// GetUuidListSize is a free data retrieval call binding the contract method 0x6b303682.
//
// Solidity: function getUuidListSize() constant returns(uint256)
func (_FilesData *FilesDataCaller) GetUuidListSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidListSize")
	return *ret0, err
}

// GetUuidListSize is a free data retrieval call binding the contract method 0x6b303682.
//
// Solidity: function getUuidListSize() constant returns(uint256)
func (_FilesData *FilesDataSession) GetUuidListSize() (*big.Int, error) {
	return _FilesData.Contract.GetUuidListSize(&_FilesData.CallOpts)
}

// GetUuidListSize is a free data retrieval call binding the contract method 0x6b303682.
//
// Solidity: function getUuidListSize() constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetUuidListSize() (*big.Int, error) {
	return _FilesData.Contract.GetUuidListSize(&_FilesData.CallOpts)
}

// AddFile is a paid mutator transaction binding the contract method 0x81803062.
//
// Solidity: function addFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256) returns()
func (_FilesData *FilesDataTransactor) AddFile(opts *bind.TransactOpts, uuid [16]byte, ownerUuid [16]byte, uploaderUuid [16]byte, fileType [32]byte, fileDesc [4][32]byte, keccak256Hash [32]byte, sha256Hash [32]byte, r [32]byte, s [32]byte, v uint8, time *big.Int) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "addFile", uuid, ownerUuid, uploaderUuid, fileType, fileDesc, keccak256Hash, sha256Hash, r, s, v, time)
}

// AddFile is a paid mutator transaction binding the contract method 0x81803062.
//
// Solidity: function addFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256) returns()
func (_FilesData *FilesDataSession) AddFile(uuid [16]byte, ownerUuid [16]byte, uploaderUuid [16]byte, fileType [32]byte, fileDesc [4][32]byte, keccak256Hash [32]byte, sha256Hash [32]byte, r [32]byte, s [32]byte, v uint8, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.AddFile(&_FilesData.TransactOpts, uuid, ownerUuid, uploaderUuid, fileType, fileDesc, keccak256Hash, sha256Hash, r, s, v, time)
}

// AddFile is a paid mutator transaction binding the contract method 0x81803062.
//
// Solidity: function addFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256) returns()
func (_FilesData *FilesDataTransactorSession) AddFile(uuid [16]byte, ownerUuid [16]byte, uploaderUuid [16]byte, fileType [32]byte, fileDesc [4][32]byte, keccak256Hash [32]byte, sha256Hash [32]byte, r [32]byte, s [32]byte, v uint8, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.AddFile(&_FilesData.TransactOpts, uuid, ownerUuid, uploaderUuid, fileType, fileDesc, keccak256Hash, sha256Hash, r, s, v, time)
}

// AddSign is a paid mutator transaction binding the contract method 0xaf1e3afc.
//
// Solidity: function addSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8) returns()
func (_FilesData *FilesDataTransactor) AddSign(opts *bind.TransactOpts, uuid [16]byte, userUuid [16]byte, r [32]byte, s [32]byte, v uint8) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "addSign", uuid, userUuid, r, s, v)
}

// AddSign is a paid mutator transaction binding the contract method 0xaf1e3afc.
//
// Solidity: function addSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8) returns()
func (_FilesData *FilesDataSession) AddSign(uuid [16]byte, userUuid [16]byte, r [32]byte, s [32]byte, v uint8) (*types.Transaction, error) {
	return _FilesData.Contract.AddSign(&_FilesData.TransactOpts, uuid, userUuid, r, s, v)
}

// AddSign is a paid mutator transaction binding the contract method 0xaf1e3afc.
//
// Solidity: function addSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8) returns()
func (_FilesData *FilesDataTransactorSession) AddSign(uuid [16]byte, userUuid [16]byte, r [32]byte, s [32]byte, v uint8) (*types.Transaction, error) {
	return _FilesData.Contract.AddSign(&_FilesData.TransactOpts, uuid, userUuid, r, s, v)
}

// AddSuper is a paid mutator transaction binding the contract method 0xe1e8637b.
//
// Solidity: function addSuper(addr address) returns()
func (_FilesData *FilesDataTransactor) AddSuper(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "addSuper", addr)
}

// AddSuper is a paid mutator transaction binding the contract method 0xe1e8637b.
//
// Solidity: function addSuper(addr address) returns()
func (_FilesData *FilesDataSession) AddSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.AddSuper(&_FilesData.TransactOpts, addr)
}

// AddSuper is a paid mutator transaction binding the contract method 0xe1e8637b.
//
// Solidity: function addSuper(addr address) returns()
func (_FilesData *FilesDataTransactorSession) AddSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.AddSuper(&_FilesData.TransactOpts, addr)
}

// DelFile is a paid mutator transaction binding the contract method 0xab594cf6.
//
// Solidity: function delFile(uuid bytes16) returns()
func (_FilesData *FilesDataTransactor) DelFile(opts *bind.TransactOpts, uuid [16]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "delFile", uuid)
}

// DelFile is a paid mutator transaction binding the contract method 0xab594cf6.
//
// Solidity: function delFile(uuid bytes16) returns()
func (_FilesData *FilesDataSession) DelFile(uuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.DelFile(&_FilesData.TransactOpts, uuid)
}

// DelFile is a paid mutator transaction binding the contract method 0xab594cf6.
//
// Solidity: function delFile(uuid bytes16) returns()
func (_FilesData *FilesDataTransactorSession) DelFile(uuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.DelFile(&_FilesData.TransactOpts, uuid)
}

// DelSuper is a paid mutator transaction binding the contract method 0x65f337f5.
//
// Solidity: function delSuper(addr address) returns()
func (_FilesData *FilesDataTransactor) DelSuper(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "delSuper", addr)
}

// DelSuper is a paid mutator transaction binding the contract method 0x65f337f5.
//
// Solidity: function delSuper(addr address) returns()
func (_FilesData *FilesDataSession) DelSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.DelSuper(&_FilesData.TransactOpts, addr)
}

// DelSuper is a paid mutator transaction binding the contract method 0x65f337f5.
//
// Solidity: function delSuper(addr address) returns()
func (_FilesData *FilesDataTransactorSession) DelSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.DelSuper(&_FilesData.TransactOpts, addr)
}

// SetActive is a paid mutator transaction binding the contract method 0x24716b55.
//
// Solidity: function setActive(uuid bytes16, active bool) returns()
func (_FilesData *FilesDataTransactor) SetActive(opts *bind.TransactOpts, uuid [16]byte, active bool) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setActive", uuid, active)
}

// SetActive is a paid mutator transaction binding the contract method 0x24716b55.
//
// Solidity: function setActive(uuid bytes16, active bool) returns()
func (_FilesData *FilesDataSession) SetActive(uuid [16]byte, active bool) (*types.Transaction, error) {
	return _FilesData.Contract.SetActive(&_FilesData.TransactOpts, uuid, active)
}

// SetActive is a paid mutator transaction binding the contract method 0x24716b55.
//
// Solidity: function setActive(uuid bytes16, active bool) returns()
func (_FilesData *FilesDataTransactorSession) SetActive(uuid [16]byte, active bool) (*types.Transaction, error) {
	return _FilesData.Contract.SetActive(&_FilesData.TransactOpts, uuid, active)
}

// SetFileDesc is a paid mutator transaction binding the contract method 0xa06f2e46.
//
// Solidity: function setFileDesc(uuid bytes16, fileDesc bytes32[4]) returns()
func (_FilesData *FilesDataTransactor) SetFileDesc(opts *bind.TransactOpts, uuid [16]byte, fileDesc [4][32]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setFileDesc", uuid, fileDesc)
}

// SetFileDesc is a paid mutator transaction binding the contract method 0xa06f2e46.
//
// Solidity: function setFileDesc(uuid bytes16, fileDesc bytes32[4]) returns()
func (_FilesData *FilesDataSession) SetFileDesc(uuid [16]byte, fileDesc [4][32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileDesc(&_FilesData.TransactOpts, uuid, fileDesc)
}

// SetFileDesc is a paid mutator transaction binding the contract method 0xa06f2e46.
//
// Solidity: function setFileDesc(uuid bytes16, fileDesc bytes32[4]) returns()
func (_FilesData *FilesDataTransactorSession) SetFileDesc(uuid [16]byte, fileDesc [4][32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileDesc(&_FilesData.TransactOpts, uuid, fileDesc)
}

// SetFileType is a paid mutator transaction binding the contract method 0x28360cdd.
//
// Solidity: function setFileType(uuid bytes16, fileType bytes32) returns()
func (_FilesData *FilesDataTransactor) SetFileType(opts *bind.TransactOpts, uuid [16]byte, fileType [32]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setFileType", uuid, fileType)
}

// SetFileType is a paid mutator transaction binding the contract method 0x28360cdd.
//
// Solidity: function setFileType(uuid bytes16, fileType bytes32) returns()
func (_FilesData *FilesDataSession) SetFileType(uuid [16]byte, fileType [32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileType(&_FilesData.TransactOpts, uuid, fileType)
}

// SetFileType is a paid mutator transaction binding the contract method 0x28360cdd.
//
// Solidity: function setFileType(uuid bytes16, fileType bytes32) returns()
func (_FilesData *FilesDataTransactorSession) SetFileType(uuid [16]byte, fileType [32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileType(&_FilesData.TransactOpts, uuid, fileType)
}

// SetOwnerUuid is a paid mutator transaction binding the contract method 0x2f682a60.
//
// Solidity: function setOwnerUuid(uuid bytes16, ownerUuid bytes16) returns()
func (_FilesData *FilesDataTransactor) SetOwnerUuid(opts *bind.TransactOpts, uuid [16]byte, ownerUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setOwnerUuid", uuid, ownerUuid)
}

// SetOwnerUuid is a paid mutator transaction binding the contract method 0x2f682a60.
//
// Solidity: function setOwnerUuid(uuid bytes16, ownerUuid bytes16) returns()
func (_FilesData *FilesDataSession) SetOwnerUuid(uuid [16]byte, ownerUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetOwnerUuid(&_FilesData.TransactOpts, uuid, ownerUuid)
}

// SetOwnerUuid is a paid mutator transaction binding the contract method 0x2f682a60.
//
// Solidity: function setOwnerUuid(uuid bytes16, ownerUuid bytes16) returns()
func (_FilesData *FilesDataTransactorSession) SetOwnerUuid(uuid [16]byte, ownerUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetOwnerUuid(&_FilesData.TransactOpts, uuid, ownerUuid)
}

// SetTime is a paid mutator transaction binding the contract method 0x3f7a52b6.
//
// Solidity: function setTime(uuid bytes16, time uint256) returns()
func (_FilesData *FilesDataTransactor) SetTime(opts *bind.TransactOpts, uuid [16]byte, time *big.Int) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setTime", uuid, time)
}

// SetTime is a paid mutator transaction binding the contract method 0x3f7a52b6.
//
// Solidity: function setTime(uuid bytes16, time uint256) returns()
func (_FilesData *FilesDataSession) SetTime(uuid [16]byte, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.SetTime(&_FilesData.TransactOpts, uuid, time)
}

// SetTime is a paid mutator transaction binding the contract method 0x3f7a52b6.
//
// Solidity: function setTime(uuid bytes16, time uint256) returns()
func (_FilesData *FilesDataTransactorSession) SetTime(uuid [16]byte, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.SetTime(&_FilesData.TransactOpts, uuid, time)
}

// SetUploaderUuid is a paid mutator transaction binding the contract method 0x6c75a331.
//
// Solidity: function setUploaderUuid(uuid bytes16, uploaderUuid bytes16) returns()
func (_FilesData *FilesDataTransactor) SetUploaderUuid(opts *bind.TransactOpts, uuid [16]byte, uploaderUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setUploaderUuid", uuid, uploaderUuid)
}

// SetUploaderUuid is a paid mutator transaction binding the contract method 0x6c75a331.
//
// Solidity: function setUploaderUuid(uuid bytes16, uploaderUuid bytes16) returns()
func (_FilesData *FilesDataSession) SetUploaderUuid(uuid [16]byte, uploaderUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetUploaderUuid(&_FilesData.TransactOpts, uuid, uploaderUuid)
}

// SetUploaderUuid is a paid mutator transaction binding the contract method 0x6c75a331.
//
// Solidity: function setUploaderUuid(uuid bytes16, uploaderUuid bytes16) returns()
func (_FilesData *FilesDataTransactorSession) SetUploaderUuid(uuid [16]byte, uploaderUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetUploaderUuid(&_FilesData.TransactOpts, uuid, uploaderUuid)
}

// FilesDataOnAddFileIterator is returned from FilterOnAddFile and is used to iterate over the raw logs and unpacked data for OnAddFile events raised by the FilesData contract.
type FilesDataOnAddFileIterator struct {
	Event *FilesDataOnAddFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnAddFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnAddFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnAddFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnAddFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnAddFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnAddFile represents a OnAddFile event raised by the FilesData contract.
type FilesDataOnAddFile struct {
	Uuid          [16]byte
	OwnerUuid     [16]byte
	UploaderUuid  [16]byte
	FileType      [32]byte
	FileDesc      [4][32]byte
	Keccak256Hash [32]byte
	Sha256Hash    [32]byte
	R             [32]byte
	S             [32]byte
	V             uint8
	Time          *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOnAddFile is a free log retrieval operation binding the contract event 0xe5db0782a88ef1dd5e05dbcd66036151fdd928c04a041691230dff05e269440a.
//
// Solidity: e onAddFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256)
func (_FilesData *FilesDataFilterer) FilterOnAddFile(opts *bind.FilterOpts) (*FilesDataOnAddFileIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onAddFile")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnAddFileIterator{contract: _FilesData.contract, event: "onAddFile", logs: logs, sub: sub}, nil
}

// WatchOnAddFile is a free log subscription operation binding the contract event 0xe5db0782a88ef1dd5e05dbcd66036151fdd928c04a041691230dff05e269440a.
//
// Solidity: e onAddFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256)
func (_FilesData *FilesDataFilterer) WatchOnAddFile(opts *bind.WatchOpts, sink chan<- *FilesDataOnAddFile) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onAddFile")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnAddFile)
				if err := _FilesData.contract.UnpackLog(event, "onAddFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnAddSignIterator is returned from FilterOnAddSign and is used to iterate over the raw logs and unpacked data for OnAddSign events raised by the FilesData contract.
type FilesDataOnAddSignIterator struct {
	Event *FilesDataOnAddSign // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnAddSignIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnAddSign)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnAddSign)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnAddSignIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnAddSignIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnAddSign represents a OnAddSign event raised by the FilesData contract.
type FilesDataOnAddSign struct {
	Uuid     [16]byte
	UserUuid [16]byte
	R        [32]byte
	S        [32]byte
	V        uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnAddSign is a free log retrieval operation binding the contract event 0xb6d8f3f2b7e44359d0f3577f248b9a9b8e6c275f3c9b6752d9c6905a0d18a2ac.
//
// Solidity: e onAddSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8)
func (_FilesData *FilesDataFilterer) FilterOnAddSign(opts *bind.FilterOpts) (*FilesDataOnAddSignIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onAddSign")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnAddSignIterator{contract: _FilesData.contract, event: "onAddSign", logs: logs, sub: sub}, nil
}

// WatchOnAddSign is a free log subscription operation binding the contract event 0xb6d8f3f2b7e44359d0f3577f248b9a9b8e6c275f3c9b6752d9c6905a0d18a2ac.
//
// Solidity: e onAddSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8)
func (_FilesData *FilesDataFilterer) WatchOnAddSign(opts *bind.WatchOpts, sink chan<- *FilesDataOnAddSign) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onAddSign")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnAddSign)
				if err := _FilesData.contract.UnpackLog(event, "onAddSign", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnAddSuperIterator is returned from FilterOnAddSuper and is used to iterate over the raw logs and unpacked data for OnAddSuper events raised by the FilesData contract.
type FilesDataOnAddSuperIterator struct {
	Event *FilesDataOnAddSuper // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnAddSuperIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnAddSuper)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnAddSuper)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnAddSuperIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnAddSuperIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnAddSuper represents a OnAddSuper event raised by the FilesData contract.
type FilesDataOnAddSuper struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnAddSuper is a free log retrieval operation binding the contract event 0x920999c03a7fd19172e4c657c22aa62a1bfb5e027a8cf6a2a0ee9daf4c5a3474.
//
// Solidity: e onAddSuper(addr address)
func (_FilesData *FilesDataFilterer) FilterOnAddSuper(opts *bind.FilterOpts) (*FilesDataOnAddSuperIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onAddSuper")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnAddSuperIterator{contract: _FilesData.contract, event: "onAddSuper", logs: logs, sub: sub}, nil
}

// WatchOnAddSuper is a free log subscription operation binding the contract event 0x920999c03a7fd19172e4c657c22aa62a1bfb5e027a8cf6a2a0ee9daf4c5a3474.
//
// Solidity: e onAddSuper(addr address)
func (_FilesData *FilesDataFilterer) WatchOnAddSuper(opts *bind.WatchOpts, sink chan<- *FilesDataOnAddSuper) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onAddSuper")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnAddSuper)
				if err := _FilesData.contract.UnpackLog(event, "onAddSuper", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnDelFileIterator is returned from FilterOnDelFile and is used to iterate over the raw logs and unpacked data for OnDelFile events raised by the FilesData contract.
type FilesDataOnDelFileIterator struct {
	Event *FilesDataOnDelFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnDelFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnDelFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnDelFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnDelFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnDelFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnDelFile represents a OnDelFile event raised by the FilesData contract.
type FilesDataOnDelFile struct {
	Uuid [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnDelFile is a free log retrieval operation binding the contract event 0x5084265f9b0b758e57a9c7d957106776471ed835d7267fb54d933927a3481bfd.
//
// Solidity: e onDelFile(uuid bytes16)
func (_FilesData *FilesDataFilterer) FilterOnDelFile(opts *bind.FilterOpts) (*FilesDataOnDelFileIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onDelFile")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnDelFileIterator{contract: _FilesData.contract, event: "onDelFile", logs: logs, sub: sub}, nil
}

// WatchOnDelFile is a free log subscription operation binding the contract event 0x5084265f9b0b758e57a9c7d957106776471ed835d7267fb54d933927a3481bfd.
//
// Solidity: e onDelFile(uuid bytes16)
func (_FilesData *FilesDataFilterer) WatchOnDelFile(opts *bind.WatchOpts, sink chan<- *FilesDataOnDelFile) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onDelFile")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnDelFile)
				if err := _FilesData.contract.UnpackLog(event, "onDelFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnDelSuperIterator is returned from FilterOnDelSuper and is used to iterate over the raw logs and unpacked data for OnDelSuper events raised by the FilesData contract.
type FilesDataOnDelSuperIterator struct {
	Event *FilesDataOnDelSuper // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnDelSuperIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnDelSuper)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnDelSuper)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnDelSuperIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnDelSuperIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnDelSuper represents a OnDelSuper event raised by the FilesData contract.
type FilesDataOnDelSuper struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnDelSuper is a free log retrieval operation binding the contract event 0x5561c1cda602083d14af2f0773152f273f6f9bf8feb17ce6265f94aec25bde00.
//
// Solidity: e onDelSuper(addr address)
func (_FilesData *FilesDataFilterer) FilterOnDelSuper(opts *bind.FilterOpts) (*FilesDataOnDelSuperIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onDelSuper")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnDelSuperIterator{contract: _FilesData.contract, event: "onDelSuper", logs: logs, sub: sub}, nil
}

// WatchOnDelSuper is a free log subscription operation binding the contract event 0x5561c1cda602083d14af2f0773152f273f6f9bf8feb17ce6265f94aec25bde00.
//
// Solidity: e onDelSuper(addr address)
func (_FilesData *FilesDataFilterer) WatchOnDelSuper(opts *bind.WatchOpts, sink chan<- *FilesDataOnDelSuper) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onDelSuper")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnDelSuper)
				if err := _FilesData.contract.UnpackLog(event, "onDelSuper", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetActiveIterator is returned from FilterOnSetActive and is used to iterate over the raw logs and unpacked data for OnSetActive events raised by the FilesData contract.
type FilesDataOnSetActiveIterator struct {
	Event *FilesDataOnSetActive // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetActiveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetActiveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetActive represents a OnSetActive event raised by the FilesData contract.
type FilesDataOnSetActive struct {
	Uuid   [16]byte
	Active bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOnSetActive is a free log retrieval operation binding the contract event 0x713e572bb47b301d3993c6d748aa8f43912b3e2864d1fd701e16e586fbb53905.
//
// Solidity: e onSetActive(uuid bytes16, active bool)
func (_FilesData *FilesDataFilterer) FilterOnSetActive(opts *bind.FilterOpts) (*FilesDataOnSetActiveIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetActive")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetActiveIterator{contract: _FilesData.contract, event: "onSetActive", logs: logs, sub: sub}, nil
}

// WatchOnSetActive is a free log subscription operation binding the contract event 0x713e572bb47b301d3993c6d748aa8f43912b3e2864d1fd701e16e586fbb53905.
//
// Solidity: e onSetActive(uuid bytes16, active bool)
func (_FilesData *FilesDataFilterer) WatchOnSetActive(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetActive) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetActive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetActive)
				if err := _FilesData.contract.UnpackLog(event, "onSetActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetFileDescIterator is returned from FilterOnSetFileDesc and is used to iterate over the raw logs and unpacked data for OnSetFileDesc events raised by the FilesData contract.
type FilesDataOnSetFileDescIterator struct {
	Event *FilesDataOnSetFileDesc // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetFileDescIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetFileDesc)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetFileDesc)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetFileDescIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetFileDescIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetFileDesc represents a OnSetFileDesc event raised by the FilesData contract.
type FilesDataOnSetFileDesc struct {
	Uuid     [16]byte
	FileDesc [4][32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnSetFileDesc is a free log retrieval operation binding the contract event 0x62c9cfebd42861a16451b2ce63bf3d3e5bcdb62acbc46482d52d0c48d34eb9b3.
//
// Solidity: e onSetFileDesc(uuid bytes16, fileDesc bytes32[4])
func (_FilesData *FilesDataFilterer) FilterOnSetFileDesc(opts *bind.FilterOpts) (*FilesDataOnSetFileDescIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetFileDesc")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetFileDescIterator{contract: _FilesData.contract, event: "onSetFileDesc", logs: logs, sub: sub}, nil
}

// WatchOnSetFileDesc is a free log subscription operation binding the contract event 0x62c9cfebd42861a16451b2ce63bf3d3e5bcdb62acbc46482d52d0c48d34eb9b3.
//
// Solidity: e onSetFileDesc(uuid bytes16, fileDesc bytes32[4])
func (_FilesData *FilesDataFilterer) WatchOnSetFileDesc(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetFileDesc) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetFileDesc")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetFileDesc)
				if err := _FilesData.contract.UnpackLog(event, "onSetFileDesc", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetFileTypeIterator is returned from FilterOnSetFileType and is used to iterate over the raw logs and unpacked data for OnSetFileType events raised by the FilesData contract.
type FilesDataOnSetFileTypeIterator struct {
	Event *FilesDataOnSetFileType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetFileTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetFileType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetFileType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetFileTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetFileTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetFileType represents a OnSetFileType event raised by the FilesData contract.
type FilesDataOnSetFileType struct {
	Uuid     [16]byte
	FileType [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnSetFileType is a free log retrieval operation binding the contract event 0x0f5d2a1fd7e620b5060ef0c66774a0475af737bef138fc169dfa8aca450e3899.
//
// Solidity: e onSetFileType(uuid bytes16, fileType bytes32)
func (_FilesData *FilesDataFilterer) FilterOnSetFileType(opts *bind.FilterOpts) (*FilesDataOnSetFileTypeIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetFileType")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetFileTypeIterator{contract: _FilesData.contract, event: "onSetFileType", logs: logs, sub: sub}, nil
}

// WatchOnSetFileType is a free log subscription operation binding the contract event 0x0f5d2a1fd7e620b5060ef0c66774a0475af737bef138fc169dfa8aca450e3899.
//
// Solidity: e onSetFileType(uuid bytes16, fileType bytes32)
func (_FilesData *FilesDataFilterer) WatchOnSetFileType(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetFileType) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetFileType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetFileType)
				if err := _FilesData.contract.UnpackLog(event, "onSetFileType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetOwnerUuidIterator is returned from FilterOnSetOwnerUuid and is used to iterate over the raw logs and unpacked data for OnSetOwnerUuid events raised by the FilesData contract.
type FilesDataOnSetOwnerUuidIterator struct {
	Event *FilesDataOnSetOwnerUuid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetOwnerUuidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetOwnerUuid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetOwnerUuid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetOwnerUuidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetOwnerUuidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetOwnerUuid represents a OnSetOwnerUuid event raised by the FilesData contract.
type FilesDataOnSetOwnerUuid struct {
	Uuid      [16]byte
	OwnerUuid [16]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOnSetOwnerUuid is a free log retrieval operation binding the contract event 0x82e7473892dc1da52c17ad55ae9ce073d7e153c1313b43a75527e983c42f9c66.
//
// Solidity: e onSetOwnerUuid(uuid bytes16, ownerUuid bytes16)
func (_FilesData *FilesDataFilterer) FilterOnSetOwnerUuid(opts *bind.FilterOpts) (*FilesDataOnSetOwnerUuidIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetOwnerUuid")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetOwnerUuidIterator{contract: _FilesData.contract, event: "onSetOwnerUuid", logs: logs, sub: sub}, nil
}

// WatchOnSetOwnerUuid is a free log subscription operation binding the contract event 0x82e7473892dc1da52c17ad55ae9ce073d7e153c1313b43a75527e983c42f9c66.
//
// Solidity: e onSetOwnerUuid(uuid bytes16, ownerUuid bytes16)
func (_FilesData *FilesDataFilterer) WatchOnSetOwnerUuid(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetOwnerUuid) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetOwnerUuid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetOwnerUuid)
				if err := _FilesData.contract.UnpackLog(event, "onSetOwnerUuid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetTimeIterator is returned from FilterOnSetTime and is used to iterate over the raw logs and unpacked data for OnSetTime events raised by the FilesData contract.
type FilesDataOnSetTimeIterator struct {
	Event *FilesDataOnSetTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetTime represents a OnSetTime event raised by the FilesData contract.
type FilesDataOnSetTime struct {
	Uuid [16]byte
	Time *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnSetTime is a free log retrieval operation binding the contract event 0x50843b091ea0bec4b6ead7f725b4fcb769671b6948c77b9cd98b25ff2440d84c.
//
// Solidity: e onSetTime(uuid bytes16, time uint256)
func (_FilesData *FilesDataFilterer) FilterOnSetTime(opts *bind.FilterOpts) (*FilesDataOnSetTimeIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetTime")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetTimeIterator{contract: _FilesData.contract, event: "onSetTime", logs: logs, sub: sub}, nil
}

// WatchOnSetTime is a free log subscription operation binding the contract event 0x50843b091ea0bec4b6ead7f725b4fcb769671b6948c77b9cd98b25ff2440d84c.
//
// Solidity: e onSetTime(uuid bytes16, time uint256)
func (_FilesData *FilesDataFilterer) WatchOnSetTime(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetTime) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetTime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetTime)
				if err := _FilesData.contract.UnpackLog(event, "onSetTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetUploaderUuidIterator is returned from FilterOnSetUploaderUuid and is used to iterate over the raw logs and unpacked data for OnSetUploaderUuid events raised by the FilesData contract.
type FilesDataOnSetUploaderUuidIterator struct {
	Event *FilesDataOnSetUploaderUuid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetUploaderUuidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetUploaderUuid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetUploaderUuid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetUploaderUuidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetUploaderUuidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetUploaderUuid represents a OnSetUploaderUuid event raised by the FilesData contract.
type FilesDataOnSetUploaderUuid struct {
	Uuid         [16]byte
	UploaderUuid [16]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOnSetUploaderUuid is a free log retrieval operation binding the contract event 0xd8aaf341152319250a5bbe3f879ed37a1710d2b5dfa9676f68e9bfb98e3de630.
//
// Solidity: e onSetUploaderUuid(uuid bytes16, uploaderUuid bytes16)
func (_FilesData *FilesDataFilterer) FilterOnSetUploaderUuid(opts *bind.FilterOpts) (*FilesDataOnSetUploaderUuidIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetUploaderUuid")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetUploaderUuidIterator{contract: _FilesData.contract, event: "onSetUploaderUuid", logs: logs, sub: sub}, nil
}

// WatchOnSetUploaderUuid is a free log subscription operation binding the contract event 0xd8aaf341152319250a5bbe3f879ed37a1710d2b5dfa9676f68e9bfb98e3de630.
//
// Solidity: e onSetUploaderUuid(uuid bytes16, uploaderUuid bytes16)
func (_FilesData *FilesDataFilterer) WatchOnSetUploaderUuid(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetUploaderUuid) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetUploaderUuid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetUploaderUuid)
				if err := _FilesData.contract.UnpackLog(event, "onSetUploaderUuid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
