// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package medi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// FilesDataABI is the input ABI used to generate the binding from.
const FilesDataABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getUploaderUuid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"fileType\",\"type\":\"bytes32\"}],\"name\":\"setFileType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"ownerUuid\",\"type\":\"bytes16\"}],\"name\":\"setOwnerUuid\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuperSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFileSignerUuidByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getOwnerUuid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getFileSignerSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"keccak256Hash\",\"type\":\"bytes32\"}],\"name\":\"getUuidByKeccak256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delSuper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUuidListSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"uploaderUuid\",\"type\":\"bytes16\"}],\"name\":\"setUploaderUuid\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUuidByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"ownerUuid\",\"type\":\"bytes16\"},{\"name\":\"uploaderUuid\",\"type\":\"bytes16\"},{\"name\":\"fileType\",\"type\":\"bytes32\"},{\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"},{\"name\":\"keccak256Hash\",\"type\":\"bytes32\"},{\"name\":\"sha256Hash\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"isUuidExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"}],\"name\":\"setFileDesc\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFileSignDataByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSuperByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"delFile\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"},{\"name\":\"userUuid\",\"type\":\"bytes16\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"addSign\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getSha256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getKeccak256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getFileType\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addSuper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getFileDesc\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[4]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sha256Hash\",\"type\":\"bytes32\"}],\"name\":\"getUuidBySha256Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"easyCnsAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"ownerUuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"uploaderUuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"fileType\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"},{\"indexed\":false,\"name\":\"keccak256Hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"sha256Hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onAddFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"}],\"name\":\"onDelFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"onSetActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"ownerUuid\",\"type\":\"bytes16\"}],\"name\":\"onSetOwnerUuid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"uploaderUuid\",\"type\":\"bytes16\"}],\"name\":\"onSetUploaderUuid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"fileType\",\"type\":\"bytes32\"}],\"name\":\"onSetFileType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"fileDesc\",\"type\":\"bytes32[4]\"}],\"name\":\"onSetFileDesc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"userUuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"onAddSign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onSetTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"onAddSuper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"onDelSuper\",\"type\":\"event\"}]"

// FilesDataBin is the compiled bytecode used for deploying new contracts.
const FilesDataBin = ``

// DeployFilesData deploys a new Ethereum contract, binding an instance of FilesData to it.
func DeployFilesData(auth *bind.TransactOpts, backend bind.ContractBackend, easyCnsAddress common.Address) (common.Address, *types.Transaction, *FilesData, error) {
	parsed, err := abi.JSON(strings.NewReader(FilesDataABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FilesDataBin), backend, easyCnsAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FilesData{FilesDataCaller: FilesDataCaller{contract: contract}, FilesDataTransactor: FilesDataTransactor{contract: contract}, FilesDataFilterer: FilesDataFilterer{contract: contract}}, nil
}

// FilesData is an auto generated Go binding around an Ethereum contract.
type FilesData struct {
	FilesDataCaller     // Read-only binding to the contract
	FilesDataTransactor // Write-only binding to the contract
	FilesDataFilterer   // Log filterer for contract events
}

// FilesDataCaller is an auto generated read-only Go binding around an Ethereum contract.
type FilesDataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesDataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FilesDataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesDataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FilesDataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesDataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FilesDataSession struct {
	Contract     *FilesData        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FilesDataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FilesDataCallerSession struct {
	Contract *FilesDataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// FilesDataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FilesDataTransactorSession struct {
	Contract     *FilesDataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FilesDataRaw is an auto generated low-level Go binding around an Ethereum contract.
type FilesDataRaw struct {
	Contract *FilesData // Generic contract binding to access the raw methods on
}

// FilesDataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FilesDataCallerRaw struct {
	Contract *FilesDataCaller // Generic read-only contract binding to access the raw methods on
}

// FilesDataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FilesDataTransactorRaw struct {
	Contract *FilesDataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFilesData creates a new instance of FilesData, bound to a specific deployed contract.
func NewFilesData(address common.Address, backend bind.ContractBackend) (*FilesData, error) {
	contract, err := bindFilesData(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FilesData{FilesDataCaller: FilesDataCaller{contract: contract}, FilesDataTransactor: FilesDataTransactor{contract: contract}, FilesDataFilterer: FilesDataFilterer{contract: contract}}, nil
}

// NewFilesDataCaller creates a new read-only instance of FilesData, bound to a specific deployed contract.
func NewFilesDataCaller(address common.Address, caller bind.ContractCaller) (*FilesDataCaller, error) {
	contract, err := bindFilesData(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FilesDataCaller{contract: contract}, nil
}

// NewFilesDataTransactor creates a new write-only instance of FilesData, bound to a specific deployed contract.
func NewFilesDataTransactor(address common.Address, transactor bind.ContractTransactor) (*FilesDataTransactor, error) {
	contract, err := bindFilesData(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FilesDataTransactor{contract: contract}, nil
}

// NewFilesDataFilterer creates a new log filterer instance of FilesData, bound to a specific deployed contract.
func NewFilesDataFilterer(address common.Address, filterer bind.ContractFilterer) (*FilesDataFilterer, error) {
	contract, err := bindFilesData(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FilesDataFilterer{contract: contract}, nil
}

// bindFilesData binds a generic wrapper to an already deployed contract.
func bindFilesData(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FilesDataABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FilesData *FilesDataRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _FilesData.Contract.FilesDataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FilesData *FilesDataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FilesData.Contract.FilesDataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FilesData *FilesDataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FilesData.Contract.FilesDataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FilesData *FilesDataCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _FilesData.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FilesData *FilesDataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FilesData.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FilesData *FilesDataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FilesData.Contract.contract.Transact(opts, method, params...)
}

// GetFileDesc is a free data retrieval call binding the contract method 0xeedbe915.
//
// Solidity: function getFileDesc(uuid bytes16) constant returns(bytes32[4])
func (_FilesData *FilesDataCaller) GetFileDesc(opts *bind.CallOpts, uuid [16]byte) ([4][32]byte, error) {
	var (
		ret0 = new([4][32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileDesc", uuid)
	return *ret0, err
}

// GetFileDesc is a free data retrieval call binding the contract method 0xeedbe915.
//
// Solidity: function getFileDesc(uuid bytes16) constant returns(bytes32[4])
func (_FilesData *FilesDataSession) GetFileDesc(uuid [16]byte) ([4][32]byte, error) {
	return _FilesData.Contract.GetFileDesc(&_FilesData.CallOpts, uuid)
}

// GetFileDesc is a free data retrieval call binding the contract method 0xeedbe915.
//
// Solidity: function getFileDesc(uuid bytes16) constant returns(bytes32[4])
func (_FilesData *FilesDataCallerSession) GetFileDesc(uuid [16]byte) ([4][32]byte, error) {
	return _FilesData.Contract.GetFileDesc(&_FilesData.CallOpts, uuid)
}

// GetFileSignDataByIndex is a free data retrieval call binding the contract method 0xa8ecd649.
//
// Solidity: function getFileSignDataByIndex(uuid bytes16, index uint256) constant returns(bytes32, bytes32, uint8)
func (_FilesData *FilesDataCaller) GetFileSignDataByIndex(opts *bind.CallOpts, uuid [16]byte, index *big.Int) ([32]byte, [32]byte, uint8, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new([32]byte)
		ret2 = new(uint8)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _FilesData.contract.Call(opts, out, "getFileSignDataByIndex", uuid, index)
	return *ret0, *ret1, *ret2, err
}

// GetFileSignDataByIndex is a free data retrieval call binding the contract method 0xa8ecd649.
//
// Solidity: function getFileSignDataByIndex(uuid bytes16, index uint256) constant returns(bytes32, bytes32, uint8)
func (_FilesData *FilesDataSession) GetFileSignDataByIndex(uuid [16]byte, index *big.Int) ([32]byte, [32]byte, uint8, error) {
	return _FilesData.Contract.GetFileSignDataByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileSignDataByIndex is a free data retrieval call binding the contract method 0xa8ecd649.
//
// Solidity: function getFileSignDataByIndex(uuid bytes16, index uint256) constant returns(bytes32, bytes32, uint8)
func (_FilesData *FilesDataCallerSession) GetFileSignDataByIndex(uuid [16]byte, index *big.Int) ([32]byte, [32]byte, uint8, error) {
	return _FilesData.Contract.GetFileSignDataByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileSignerSize is a free data retrieval call binding the contract method 0x5cbccaea.
//
// Solidity: function getFileSignerSize(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCaller) GetFileSignerSize(opts *bind.CallOpts, uuid [16]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileSignerSize", uuid)
	return *ret0, err
}

// GetFileSignerSize is a free data retrieval call binding the contract method 0x5cbccaea.
//
// Solidity: function getFileSignerSize(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataSession) GetFileSignerSize(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetFileSignerSize(&_FilesData.CallOpts, uuid)
}

// GetFileSignerSize is a free data retrieval call binding the contract method 0x5cbccaea.
//
// Solidity: function getFileSignerSize(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetFileSignerSize(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetFileSignerSize(&_FilesData.CallOpts, uuid)
}

// GetFileSignerUuidByIndex is a free data retrieval call binding the contract method 0x38fc1214.
//
// Solidity: function getFileSignerUuidByIndex(uuid bytes16, index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetFileSignerUuidByIndex(opts *bind.CallOpts, uuid [16]byte, index *big.Int) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileSignerUuidByIndex", uuid, index)
	return *ret0, err
}

// GetFileSignerUuidByIndex is a free data retrieval call binding the contract method 0x38fc1214.
//
// Solidity: function getFileSignerUuidByIndex(uuid bytes16, index uint256) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetFileSignerUuidByIndex(uuid [16]byte, index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetFileSignerUuidByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileSignerUuidByIndex is a free data retrieval call binding the contract method 0x38fc1214.
//
// Solidity: function getFileSignerUuidByIndex(uuid bytes16, index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetFileSignerUuidByIndex(uuid [16]byte, index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetFileSignerUuidByIndex(&_FilesData.CallOpts, uuid, index)
}

// GetFileType is a free data retrieval call binding the contract method 0xc8c459b9.
//
// Solidity: function getFileType(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCaller) GetFileType(opts *bind.CallOpts, uuid [16]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getFileType", uuid)
	return *ret0, err
}

// GetFileType is a free data retrieval call binding the contract method 0xc8c459b9.
//
// Solidity: function getFileType(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataSession) GetFileType(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetFileType(&_FilesData.CallOpts, uuid)
}

// GetFileType is a free data retrieval call binding the contract method 0xc8c459b9.
//
// Solidity: function getFileType(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCallerSession) GetFileType(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetFileType(&_FilesData.CallOpts, uuid)
}

// GetKeccak256Hash is a free data retrieval call binding the contract method 0xc66a8145.
//
// Solidity: function getKeccak256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCaller) GetKeccak256Hash(opts *bind.CallOpts, uuid [16]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getKeccak256Hash", uuid)
	return *ret0, err
}

// GetKeccak256Hash is a free data retrieval call binding the contract method 0xc66a8145.
//
// Solidity: function getKeccak256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataSession) GetKeccak256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetKeccak256Hash(&_FilesData.CallOpts, uuid)
}

// GetKeccak256Hash is a free data retrieval call binding the contract method 0xc66a8145.
//
// Solidity: function getKeccak256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCallerSession) GetKeccak256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetKeccak256Hash(&_FilesData.CallOpts, uuid)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_FilesData *FilesDataCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_FilesData *FilesDataSession) GetOwner() (common.Address, error) {
	return _FilesData.Contract.GetOwner(&_FilesData.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_FilesData *FilesDataCallerSession) GetOwner() (common.Address, error) {
	return _FilesData.Contract.GetOwner(&_FilesData.CallOpts)
}

// GetOwnerUuid is a free data retrieval call binding the contract method 0x5b379418.
//
// Solidity: function getOwnerUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetOwnerUuid(opts *bind.CallOpts, uuid [16]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getOwnerUuid", uuid)
	return *ret0, err
}

// GetOwnerUuid is a free data retrieval call binding the contract method 0x5b379418.
//
// Solidity: function getOwnerUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetOwnerUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetOwnerUuid(&_FilesData.CallOpts, uuid)
}

// GetOwnerUuid is a free data retrieval call binding the contract method 0x5b379418.
//
// Solidity: function getOwnerUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetOwnerUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetOwnerUuid(&_FilesData.CallOpts, uuid)
}

// GetSha256Hash is a free data retrieval call binding the contract method 0xb21124ef.
//
// Solidity: function getSha256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCaller) GetSha256Hash(opts *bind.CallOpts, uuid [16]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getSha256Hash", uuid)
	return *ret0, err
}

// GetSha256Hash is a free data retrieval call binding the contract method 0xb21124ef.
//
// Solidity: function getSha256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataSession) GetSha256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetSha256Hash(&_FilesData.CallOpts, uuid)
}

// GetSha256Hash is a free data retrieval call binding the contract method 0xb21124ef.
//
// Solidity: function getSha256Hash(uuid bytes16) constant returns(bytes32)
func (_FilesData *FilesDataCallerSession) GetSha256Hash(uuid [16]byte) ([32]byte, error) {
	return _FilesData.Contract.GetSha256Hash(&_FilesData.CallOpts, uuid)
}

// GetSuperByIndex is a free data retrieval call binding the contract method 0xab013c26.
//
// Solidity: function getSuperByIndex(index uint256) constant returns(address)
func (_FilesData *FilesDataCaller) GetSuperByIndex(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getSuperByIndex", index)
	return *ret0, err
}

// GetSuperByIndex is a free data retrieval call binding the contract method 0xab013c26.
//
// Solidity: function getSuperByIndex(index uint256) constant returns(address)
func (_FilesData *FilesDataSession) GetSuperByIndex(index *big.Int) (common.Address, error) {
	return _FilesData.Contract.GetSuperByIndex(&_FilesData.CallOpts, index)
}

// GetSuperByIndex is a free data retrieval call binding the contract method 0xab013c26.
//
// Solidity: function getSuperByIndex(index uint256) constant returns(address)
func (_FilesData *FilesDataCallerSession) GetSuperByIndex(index *big.Int) (common.Address, error) {
	return _FilesData.Contract.GetSuperByIndex(&_FilesData.CallOpts, index)
}

// GetSuperSize is a free data retrieval call binding the contract method 0x34349621.
//
// Solidity: function getSuperSize() constant returns(uint256)
func (_FilesData *FilesDataCaller) GetSuperSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getSuperSize")
	return *ret0, err
}

// GetSuperSize is a free data retrieval call binding the contract method 0x34349621.
//
// Solidity: function getSuperSize() constant returns(uint256)
func (_FilesData *FilesDataSession) GetSuperSize() (*big.Int, error) {
	return _FilesData.Contract.GetSuperSize(&_FilesData.CallOpts)
}

// GetSuperSize is a free data retrieval call binding the contract method 0x34349621.
//
// Solidity: function getSuperSize() constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetSuperSize() (*big.Int, error) {
	return _FilesData.Contract.GetSuperSize(&_FilesData.CallOpts)
}

// GetTime is a free data retrieval call binding the contract method 0xfe07283a.
//
// Solidity: function getTime(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCaller) GetTime(opts *bind.CallOpts, uuid [16]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getTime", uuid)
	return *ret0, err
}

// GetTime is a free data retrieval call binding the contract method 0xfe07283a.
//
// Solidity: function getTime(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataSession) GetTime(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetTime(&_FilesData.CallOpts, uuid)
}

// GetTime is a free data retrieval call binding the contract method 0xfe07283a.
//
// Solidity: function getTime(uuid bytes16) constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetTime(uuid [16]byte) (*big.Int, error) {
	return _FilesData.Contract.GetTime(&_FilesData.CallOpts, uuid)
}

// GetUploaderUuid is a free data retrieval call binding the contract method 0x06e4dffd.
//
// Solidity: function getUploaderUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUploaderUuid(opts *bind.CallOpts, uuid [16]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUploaderUuid", uuid)
	return *ret0, err
}

// GetUploaderUuid is a free data retrieval call binding the contract method 0x06e4dffd.
//
// Solidity: function getUploaderUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUploaderUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUploaderUuid(&_FilesData.CallOpts, uuid)
}

// GetUploaderUuid is a free data retrieval call binding the contract method 0x06e4dffd.
//
// Solidity: function getUploaderUuid(uuid bytes16) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUploaderUuid(uuid [16]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUploaderUuid(&_FilesData.CallOpts, uuid)
}

// GetUuidByIndex is a free data retrieval call binding the contract method 0x7c333c0a.
//
// Solidity: function getUuidByIndex(index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUuidByIndex(opts *bind.CallOpts, index *big.Int) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidByIndex", index)
	return *ret0, err
}

// GetUuidByIndex is a free data retrieval call binding the contract method 0x7c333c0a.
//
// Solidity: function getUuidByIndex(index uint256) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUuidByIndex(index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByIndex(&_FilesData.CallOpts, index)
}

// GetUuidByIndex is a free data retrieval call binding the contract method 0x7c333c0a.
//
// Solidity: function getUuidByIndex(index uint256) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUuidByIndex(index *big.Int) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByIndex(&_FilesData.CallOpts, index)
}

// GetUuidByKeccak256Hash is a free data retrieval call binding the contract method 0x5d8de8b3.
//
// Solidity: function getUuidByKeccak256Hash(keccak256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUuidByKeccak256Hash(opts *bind.CallOpts, keccak256Hash [32]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidByKeccak256Hash", keccak256Hash)
	return *ret0, err
}

// GetUuidByKeccak256Hash is a free data retrieval call binding the contract method 0x5d8de8b3.
//
// Solidity: function getUuidByKeccak256Hash(keccak256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUuidByKeccak256Hash(keccak256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByKeccak256Hash(&_FilesData.CallOpts, keccak256Hash)
}

// GetUuidByKeccak256Hash is a free data retrieval call binding the contract method 0x5d8de8b3.
//
// Solidity: function getUuidByKeccak256Hash(keccak256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUuidByKeccak256Hash(keccak256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidByKeccak256Hash(&_FilesData.CallOpts, keccak256Hash)
}

// GetUuidBySha256Hash is a free data retrieval call binding the contract method 0xfa04901f.
//
// Solidity: function getUuidBySha256Hash(sha256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCaller) GetUuidBySha256Hash(opts *bind.CallOpts, sha256Hash [32]byte) ([16]byte, error) {
	var (
		ret0 = new([16]byte)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidBySha256Hash", sha256Hash)
	return *ret0, err
}

// GetUuidBySha256Hash is a free data retrieval call binding the contract method 0xfa04901f.
//
// Solidity: function getUuidBySha256Hash(sha256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataSession) GetUuidBySha256Hash(sha256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidBySha256Hash(&_FilesData.CallOpts, sha256Hash)
}

// GetUuidBySha256Hash is a free data retrieval call binding the contract method 0xfa04901f.
//
// Solidity: function getUuidBySha256Hash(sha256Hash bytes32) constant returns(bytes16)
func (_FilesData *FilesDataCallerSession) GetUuidBySha256Hash(sha256Hash [32]byte) ([16]byte, error) {
	return _FilesData.Contract.GetUuidBySha256Hash(&_FilesData.CallOpts, sha256Hash)
}

// GetUuidListSize is a free data retrieval call binding the contract method 0x6b303682.
//
// Solidity: function getUuidListSize() constant returns(uint256)
func (_FilesData *FilesDataCaller) GetUuidListSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "getUuidListSize")
	return *ret0, err
}

// GetUuidListSize is a free data retrieval call binding the contract method 0x6b303682.
//
// Solidity: function getUuidListSize() constant returns(uint256)
func (_FilesData *FilesDataSession) GetUuidListSize() (*big.Int, error) {
	return _FilesData.Contract.GetUuidListSize(&_FilesData.CallOpts)
}

// GetUuidListSize is a free data retrieval call binding the contract method 0x6b303682.
//
// Solidity: function getUuidListSize() constant returns(uint256)
func (_FilesData *FilesDataCallerSession) GetUuidListSize() (*big.Int, error) {
	return _FilesData.Contract.GetUuidListSize(&_FilesData.CallOpts)
}

// IsUuidExist is a free data retrieval call binding the contract method 0x8eeded90.
//
// Solidity: function isUuidExist(uuid bytes16) constant returns(bool)
func (_FilesData *FilesDataCaller) IsUuidExist(opts *bind.CallOpts, uuid [16]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _FilesData.contract.Call(opts, out, "isUuidExist", uuid)
	return *ret0, err
}

// IsUuidExist is a free data retrieval call binding the contract method 0x8eeded90.
//
// Solidity: function isUuidExist(uuid bytes16) constant returns(bool)
func (_FilesData *FilesDataSession) IsUuidExist(uuid [16]byte) (bool, error) {
	return _FilesData.Contract.IsUuidExist(&_FilesData.CallOpts, uuid)
}

// IsUuidExist is a free data retrieval call binding the contract method 0x8eeded90.
//
// Solidity: function isUuidExist(uuid bytes16) constant returns(bool)
func (_FilesData *FilesDataCallerSession) IsUuidExist(uuid [16]byte) (bool, error) {
	return _FilesData.Contract.IsUuidExist(&_FilesData.CallOpts, uuid)
}

// AddFile is a paid mutator transaction binding the contract method 0x81803062.
//
// Solidity: function addFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256) returns()
func (_FilesData *FilesDataTransactor) AddFile(opts *bind.TransactOpts, uuid [16]byte, ownerUuid [16]byte, uploaderUuid [16]byte, fileType [32]byte, fileDesc [4][32]byte, keccak256Hash [32]byte, sha256Hash [32]byte, r [32]byte, s [32]byte, v uint8, time *big.Int) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "addFile", uuid, ownerUuid, uploaderUuid, fileType, fileDesc, keccak256Hash, sha256Hash, r, s, v, time)
}

// AddFile is a paid mutator transaction binding the contract method 0x81803062.
//
// Solidity: function addFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256) returns()
func (_FilesData *FilesDataSession) AddFile(uuid [16]byte, ownerUuid [16]byte, uploaderUuid [16]byte, fileType [32]byte, fileDesc [4][32]byte, keccak256Hash [32]byte, sha256Hash [32]byte, r [32]byte, s [32]byte, v uint8, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.AddFile(&_FilesData.TransactOpts, uuid, ownerUuid, uploaderUuid, fileType, fileDesc, keccak256Hash, sha256Hash, r, s, v, time)
}

// AddFile is a paid mutator transaction binding the contract method 0x81803062.
//
// Solidity: function addFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256) returns()
func (_FilesData *FilesDataTransactorSession) AddFile(uuid [16]byte, ownerUuid [16]byte, uploaderUuid [16]byte, fileType [32]byte, fileDesc [4][32]byte, keccak256Hash [32]byte, sha256Hash [32]byte, r [32]byte, s [32]byte, v uint8, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.AddFile(&_FilesData.TransactOpts, uuid, ownerUuid, uploaderUuid, fileType, fileDesc, keccak256Hash, sha256Hash, r, s, v, time)
}

// AddSign is a paid mutator transaction binding the contract method 0xaf1e3afc.
//
// Solidity: function addSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8) returns()
func (_FilesData *FilesDataTransactor) AddSign(opts *bind.TransactOpts, uuid [16]byte, userUuid [16]byte, r [32]byte, s [32]byte, v uint8) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "addSign", uuid, userUuid, r, s, v)
}

// AddSign is a paid mutator transaction binding the contract method 0xaf1e3afc.
//
// Solidity: function addSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8) returns()
func (_FilesData *FilesDataSession) AddSign(uuid [16]byte, userUuid [16]byte, r [32]byte, s [32]byte, v uint8) (*types.Transaction, error) {
	return _FilesData.Contract.AddSign(&_FilesData.TransactOpts, uuid, userUuid, r, s, v)
}

// AddSign is a paid mutator transaction binding the contract method 0xaf1e3afc.
//
// Solidity: function addSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8) returns()
func (_FilesData *FilesDataTransactorSession) AddSign(uuid [16]byte, userUuid [16]byte, r [32]byte, s [32]byte, v uint8) (*types.Transaction, error) {
	return _FilesData.Contract.AddSign(&_FilesData.TransactOpts, uuid, userUuid, r, s, v)
}

// AddSuper is a paid mutator transaction binding the contract method 0xe1e8637b.
//
// Solidity: function addSuper(addr address) returns()
func (_FilesData *FilesDataTransactor) AddSuper(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "addSuper", addr)
}

// AddSuper is a paid mutator transaction binding the contract method 0xe1e8637b.
//
// Solidity: function addSuper(addr address) returns()
func (_FilesData *FilesDataSession) AddSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.AddSuper(&_FilesData.TransactOpts, addr)
}

// AddSuper is a paid mutator transaction binding the contract method 0xe1e8637b.
//
// Solidity: function addSuper(addr address) returns()
func (_FilesData *FilesDataTransactorSession) AddSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.AddSuper(&_FilesData.TransactOpts, addr)
}

// DelFile is a paid mutator transaction binding the contract method 0xab594cf6.
//
// Solidity: function delFile(uuid bytes16) returns()
func (_FilesData *FilesDataTransactor) DelFile(opts *bind.TransactOpts, uuid [16]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "delFile", uuid)
}

// DelFile is a paid mutator transaction binding the contract method 0xab594cf6.
//
// Solidity: function delFile(uuid bytes16) returns()
func (_FilesData *FilesDataSession) DelFile(uuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.DelFile(&_FilesData.TransactOpts, uuid)
}

// DelFile is a paid mutator transaction binding the contract method 0xab594cf6.
//
// Solidity: function delFile(uuid bytes16) returns()
func (_FilesData *FilesDataTransactorSession) DelFile(uuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.DelFile(&_FilesData.TransactOpts, uuid)
}

// DelSuper is a paid mutator transaction binding the contract method 0x65f337f5.
//
// Solidity: function delSuper(addr address) returns()
func (_FilesData *FilesDataTransactor) DelSuper(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "delSuper", addr)
}

// DelSuper is a paid mutator transaction binding the contract method 0x65f337f5.
//
// Solidity: function delSuper(addr address) returns()
func (_FilesData *FilesDataSession) DelSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.DelSuper(&_FilesData.TransactOpts, addr)
}

// DelSuper is a paid mutator transaction binding the contract method 0x65f337f5.
//
// Solidity: function delSuper(addr address) returns()
func (_FilesData *FilesDataTransactorSession) DelSuper(addr common.Address) (*types.Transaction, error) {
	return _FilesData.Contract.DelSuper(&_FilesData.TransactOpts, addr)
}

// SetActive is a paid mutator transaction binding the contract method 0x24716b55.
//
// Solidity: function setActive(uuid bytes16, active bool) returns()
func (_FilesData *FilesDataTransactor) SetActive(opts *bind.TransactOpts, uuid [16]byte, active bool) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setActive", uuid, active)
}

// SetActive is a paid mutator transaction binding the contract method 0x24716b55.
//
// Solidity: function setActive(uuid bytes16, active bool) returns()
func (_FilesData *FilesDataSession) SetActive(uuid [16]byte, active bool) (*types.Transaction, error) {
	return _FilesData.Contract.SetActive(&_FilesData.TransactOpts, uuid, active)
}

// SetActive is a paid mutator transaction binding the contract method 0x24716b55.
//
// Solidity: function setActive(uuid bytes16, active bool) returns()
func (_FilesData *FilesDataTransactorSession) SetActive(uuid [16]byte, active bool) (*types.Transaction, error) {
	return _FilesData.Contract.SetActive(&_FilesData.TransactOpts, uuid, active)
}

// SetFileDesc is a paid mutator transaction binding the contract method 0xa06f2e46.
//
// Solidity: function setFileDesc(uuid bytes16, fileDesc bytes32[4]) returns()
func (_FilesData *FilesDataTransactor) SetFileDesc(opts *bind.TransactOpts, uuid [16]byte, fileDesc [4][32]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setFileDesc", uuid, fileDesc)
}

// SetFileDesc is a paid mutator transaction binding the contract method 0xa06f2e46.
//
// Solidity: function setFileDesc(uuid bytes16, fileDesc bytes32[4]) returns()
func (_FilesData *FilesDataSession) SetFileDesc(uuid [16]byte, fileDesc [4][32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileDesc(&_FilesData.TransactOpts, uuid, fileDesc)
}

// SetFileDesc is a paid mutator transaction binding the contract method 0xa06f2e46.
//
// Solidity: function setFileDesc(uuid bytes16, fileDesc bytes32[4]) returns()
func (_FilesData *FilesDataTransactorSession) SetFileDesc(uuid [16]byte, fileDesc [4][32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileDesc(&_FilesData.TransactOpts, uuid, fileDesc)
}

// SetFileType is a paid mutator transaction binding the contract method 0x28360cdd.
//
// Solidity: function setFileType(uuid bytes16, fileType bytes32) returns()
func (_FilesData *FilesDataTransactor) SetFileType(opts *bind.TransactOpts, uuid [16]byte, fileType [32]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setFileType", uuid, fileType)
}

// SetFileType is a paid mutator transaction binding the contract method 0x28360cdd.
//
// Solidity: function setFileType(uuid bytes16, fileType bytes32) returns()
func (_FilesData *FilesDataSession) SetFileType(uuid [16]byte, fileType [32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileType(&_FilesData.TransactOpts, uuid, fileType)
}

// SetFileType is a paid mutator transaction binding the contract method 0x28360cdd.
//
// Solidity: function setFileType(uuid bytes16, fileType bytes32) returns()
func (_FilesData *FilesDataTransactorSession) SetFileType(uuid [16]byte, fileType [32]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetFileType(&_FilesData.TransactOpts, uuid, fileType)
}

// SetOwnerUuid is a paid mutator transaction binding the contract method 0x2f682a60.
//
// Solidity: function setOwnerUuid(uuid bytes16, ownerUuid bytes16) returns()
func (_FilesData *FilesDataTransactor) SetOwnerUuid(opts *bind.TransactOpts, uuid [16]byte, ownerUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setOwnerUuid", uuid, ownerUuid)
}

// SetOwnerUuid is a paid mutator transaction binding the contract method 0x2f682a60.
//
// Solidity: function setOwnerUuid(uuid bytes16, ownerUuid bytes16) returns()
func (_FilesData *FilesDataSession) SetOwnerUuid(uuid [16]byte, ownerUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetOwnerUuid(&_FilesData.TransactOpts, uuid, ownerUuid)
}

// SetOwnerUuid is a paid mutator transaction binding the contract method 0x2f682a60.
//
// Solidity: function setOwnerUuid(uuid bytes16, ownerUuid bytes16) returns()
func (_FilesData *FilesDataTransactorSession) SetOwnerUuid(uuid [16]byte, ownerUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetOwnerUuid(&_FilesData.TransactOpts, uuid, ownerUuid)
}

// SetTime is a paid mutator transaction binding the contract method 0x3f7a52b6.
//
// Solidity: function setTime(uuid bytes16, time uint256) returns()
func (_FilesData *FilesDataTransactor) SetTime(opts *bind.TransactOpts, uuid [16]byte, time *big.Int) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setTime", uuid, time)
}

// SetTime is a paid mutator transaction binding the contract method 0x3f7a52b6.
//
// Solidity: function setTime(uuid bytes16, time uint256) returns()
func (_FilesData *FilesDataSession) SetTime(uuid [16]byte, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.SetTime(&_FilesData.TransactOpts, uuid, time)
}

// SetTime is a paid mutator transaction binding the contract method 0x3f7a52b6.
//
// Solidity: function setTime(uuid bytes16, time uint256) returns()
func (_FilesData *FilesDataTransactorSession) SetTime(uuid [16]byte, time *big.Int) (*types.Transaction, error) {
	return _FilesData.Contract.SetTime(&_FilesData.TransactOpts, uuid, time)
}

// SetUploaderUuid is a paid mutator transaction binding the contract method 0x6c75a331.
//
// Solidity: function setUploaderUuid(uuid bytes16, uploaderUuid bytes16) returns()
func (_FilesData *FilesDataTransactor) SetUploaderUuid(opts *bind.TransactOpts, uuid [16]byte, uploaderUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.contract.Transact(opts, "setUploaderUuid", uuid, uploaderUuid)
}

// SetUploaderUuid is a paid mutator transaction binding the contract method 0x6c75a331.
//
// Solidity: function setUploaderUuid(uuid bytes16, uploaderUuid bytes16) returns()
func (_FilesData *FilesDataSession) SetUploaderUuid(uuid [16]byte, uploaderUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetUploaderUuid(&_FilesData.TransactOpts, uuid, uploaderUuid)
}

// SetUploaderUuid is a paid mutator transaction binding the contract method 0x6c75a331.
//
// Solidity: function setUploaderUuid(uuid bytes16, uploaderUuid bytes16) returns()
func (_FilesData *FilesDataTransactorSession) SetUploaderUuid(uuid [16]byte, uploaderUuid [16]byte) (*types.Transaction, error) {
	return _FilesData.Contract.SetUploaderUuid(&_FilesData.TransactOpts, uuid, uploaderUuid)
}

// FilesDataOnAddFileIterator is returned from FilterOnAddFile and is used to iterate over the raw logs and unpacked data for OnAddFile events raised by the FilesData contract.
type FilesDataOnAddFileIterator struct {
	Event *FilesDataOnAddFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnAddFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnAddFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnAddFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnAddFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnAddFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnAddFile represents a OnAddFile event raised by the FilesData contract.
type FilesDataOnAddFile struct {
	Uuid          [16]byte
	OwnerUuid     [16]byte
	UploaderUuid  [16]byte
	FileType      [32]byte
	FileDesc      [4][32]byte
	Keccak256Hash [32]byte
	Sha256Hash    [32]byte
	R             [32]byte
	S             [32]byte
	V             uint8
	Time          *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOnAddFile is a free log retrieval operation binding the contract event 0xe5db0782a88ef1dd5e05dbcd66036151fdd928c04a041691230dff05e269440a.
//
// Solidity: e onAddFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256)
func (_FilesData *FilesDataFilterer) FilterOnAddFile(opts *bind.FilterOpts) (*FilesDataOnAddFileIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onAddFile")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnAddFileIterator{contract: _FilesData.contract, event: "onAddFile", logs: logs, sub: sub}, nil
}

// WatchOnAddFile is a free log subscription operation binding the contract event 0xe5db0782a88ef1dd5e05dbcd66036151fdd928c04a041691230dff05e269440a.
//
// Solidity: e onAddFile(uuid bytes16, ownerUuid bytes16, uploaderUuid bytes16, fileType bytes32, fileDesc bytes32[4], keccak256Hash bytes32, sha256Hash bytes32, r bytes32, s bytes32, v uint8, time uint256)
func (_FilesData *FilesDataFilterer) WatchOnAddFile(opts *bind.WatchOpts, sink chan<- *FilesDataOnAddFile) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onAddFile")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnAddFile)
				if err := _FilesData.contract.UnpackLog(event, "onAddFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnAddSignIterator is returned from FilterOnAddSign and is used to iterate over the raw logs and unpacked data for OnAddSign events raised by the FilesData contract.
type FilesDataOnAddSignIterator struct {
	Event *FilesDataOnAddSign // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnAddSignIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnAddSign)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnAddSign)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnAddSignIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnAddSignIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnAddSign represents a OnAddSign event raised by the FilesData contract.
type FilesDataOnAddSign struct {
	Uuid     [16]byte
	UserUuid [16]byte
	R        [32]byte
	S        [32]byte
	V        uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnAddSign is a free log retrieval operation binding the contract event 0xb6d8f3f2b7e44359d0f3577f248b9a9b8e6c275f3c9b6752d9c6905a0d18a2ac.
//
// Solidity: e onAddSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8)
func (_FilesData *FilesDataFilterer) FilterOnAddSign(opts *bind.FilterOpts) (*FilesDataOnAddSignIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onAddSign")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnAddSignIterator{contract: _FilesData.contract, event: "onAddSign", logs: logs, sub: sub}, nil
}

// WatchOnAddSign is a free log subscription operation binding the contract event 0xb6d8f3f2b7e44359d0f3577f248b9a9b8e6c275f3c9b6752d9c6905a0d18a2ac.
//
// Solidity: e onAddSign(uuid bytes16, userUuid bytes16, r bytes32, s bytes32, v uint8)
func (_FilesData *FilesDataFilterer) WatchOnAddSign(opts *bind.WatchOpts, sink chan<- *FilesDataOnAddSign) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onAddSign")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnAddSign)
				if err := _FilesData.contract.UnpackLog(event, "onAddSign", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnAddSuperIterator is returned from FilterOnAddSuper and is used to iterate over the raw logs and unpacked data for OnAddSuper events raised by the FilesData contract.
type FilesDataOnAddSuperIterator struct {
	Event *FilesDataOnAddSuper // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnAddSuperIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnAddSuper)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnAddSuper)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnAddSuperIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnAddSuperIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnAddSuper represents a OnAddSuper event raised by the FilesData contract.
type FilesDataOnAddSuper struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnAddSuper is a free log retrieval operation binding the contract event 0x920999c03a7fd19172e4c657c22aa62a1bfb5e027a8cf6a2a0ee9daf4c5a3474.
//
// Solidity: e onAddSuper(addr address)
func (_FilesData *FilesDataFilterer) FilterOnAddSuper(opts *bind.FilterOpts) (*FilesDataOnAddSuperIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onAddSuper")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnAddSuperIterator{contract: _FilesData.contract, event: "onAddSuper", logs: logs, sub: sub}, nil
}

// WatchOnAddSuper is a free log subscription operation binding the contract event 0x920999c03a7fd19172e4c657c22aa62a1bfb5e027a8cf6a2a0ee9daf4c5a3474.
//
// Solidity: e onAddSuper(addr address)
func (_FilesData *FilesDataFilterer) WatchOnAddSuper(opts *bind.WatchOpts, sink chan<- *FilesDataOnAddSuper) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onAddSuper")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnAddSuper)
				if err := _FilesData.contract.UnpackLog(event, "onAddSuper", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnDelFileIterator is returned from FilterOnDelFile and is used to iterate over the raw logs and unpacked data for OnDelFile events raised by the FilesData contract.
type FilesDataOnDelFileIterator struct {
	Event *FilesDataOnDelFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnDelFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnDelFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnDelFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnDelFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnDelFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnDelFile represents a OnDelFile event raised by the FilesData contract.
type FilesDataOnDelFile struct {
	Uuid [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnDelFile is a free log retrieval operation binding the contract event 0x5084265f9b0b758e57a9c7d957106776471ed835d7267fb54d933927a3481bfd.
//
// Solidity: e onDelFile(uuid bytes16)
func (_FilesData *FilesDataFilterer) FilterOnDelFile(opts *bind.FilterOpts) (*FilesDataOnDelFileIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onDelFile")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnDelFileIterator{contract: _FilesData.contract, event: "onDelFile", logs: logs, sub: sub}, nil
}

// WatchOnDelFile is a free log subscription operation binding the contract event 0x5084265f9b0b758e57a9c7d957106776471ed835d7267fb54d933927a3481bfd.
//
// Solidity: e onDelFile(uuid bytes16)
func (_FilesData *FilesDataFilterer) WatchOnDelFile(opts *bind.WatchOpts, sink chan<- *FilesDataOnDelFile) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onDelFile")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnDelFile)
				if err := _FilesData.contract.UnpackLog(event, "onDelFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnDelSuperIterator is returned from FilterOnDelSuper and is used to iterate over the raw logs and unpacked data for OnDelSuper events raised by the FilesData contract.
type FilesDataOnDelSuperIterator struct {
	Event *FilesDataOnDelSuper // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnDelSuperIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnDelSuper)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnDelSuper)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnDelSuperIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnDelSuperIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnDelSuper represents a OnDelSuper event raised by the FilesData contract.
type FilesDataOnDelSuper struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnDelSuper is a free log retrieval operation binding the contract event 0x5561c1cda602083d14af2f0773152f273f6f9bf8feb17ce6265f94aec25bde00.
//
// Solidity: e onDelSuper(addr address)
func (_FilesData *FilesDataFilterer) FilterOnDelSuper(opts *bind.FilterOpts) (*FilesDataOnDelSuperIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onDelSuper")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnDelSuperIterator{contract: _FilesData.contract, event: "onDelSuper", logs: logs, sub: sub}, nil
}

// WatchOnDelSuper is a free log subscription operation binding the contract event 0x5561c1cda602083d14af2f0773152f273f6f9bf8feb17ce6265f94aec25bde00.
//
// Solidity: e onDelSuper(addr address)
func (_FilesData *FilesDataFilterer) WatchOnDelSuper(opts *bind.WatchOpts, sink chan<- *FilesDataOnDelSuper) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onDelSuper")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnDelSuper)
				if err := _FilesData.contract.UnpackLog(event, "onDelSuper", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetActiveIterator is returned from FilterOnSetActive and is used to iterate over the raw logs and unpacked data for OnSetActive events raised by the FilesData contract.
type FilesDataOnSetActiveIterator struct {
	Event *FilesDataOnSetActive // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetActiveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetActiveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetActive represents a OnSetActive event raised by the FilesData contract.
type FilesDataOnSetActive struct {
	Uuid   [16]byte
	Active bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOnSetActive is a free log retrieval operation binding the contract event 0x713e572bb47b301d3993c6d748aa8f43912b3e2864d1fd701e16e586fbb53905.
//
// Solidity: e onSetActive(uuid bytes16, active bool)
func (_FilesData *FilesDataFilterer) FilterOnSetActive(opts *bind.FilterOpts) (*FilesDataOnSetActiveIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetActive")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetActiveIterator{contract: _FilesData.contract, event: "onSetActive", logs: logs, sub: sub}, nil
}

// WatchOnSetActive is a free log subscription operation binding the contract event 0x713e572bb47b301d3993c6d748aa8f43912b3e2864d1fd701e16e586fbb53905.
//
// Solidity: e onSetActive(uuid bytes16, active bool)
func (_FilesData *FilesDataFilterer) WatchOnSetActive(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetActive) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetActive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetActive)
				if err := _FilesData.contract.UnpackLog(event, "onSetActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetFileDescIterator is returned from FilterOnSetFileDesc and is used to iterate over the raw logs and unpacked data for OnSetFileDesc events raised by the FilesData contract.
type FilesDataOnSetFileDescIterator struct {
	Event *FilesDataOnSetFileDesc // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetFileDescIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetFileDesc)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetFileDesc)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetFileDescIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetFileDescIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetFileDesc represents a OnSetFileDesc event raised by the FilesData contract.
type FilesDataOnSetFileDesc struct {
	Uuid     [16]byte
	FileDesc [4][32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnSetFileDesc is a free log retrieval operation binding the contract event 0x62c9cfebd42861a16451b2ce63bf3d3e5bcdb62acbc46482d52d0c48d34eb9b3.
//
// Solidity: e onSetFileDesc(uuid bytes16, fileDesc bytes32[4])
func (_FilesData *FilesDataFilterer) FilterOnSetFileDesc(opts *bind.FilterOpts) (*FilesDataOnSetFileDescIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetFileDesc")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetFileDescIterator{contract: _FilesData.contract, event: "onSetFileDesc", logs: logs, sub: sub}, nil
}

// WatchOnSetFileDesc is a free log subscription operation binding the contract event 0x62c9cfebd42861a16451b2ce63bf3d3e5bcdb62acbc46482d52d0c48d34eb9b3.
//
// Solidity: e onSetFileDesc(uuid bytes16, fileDesc bytes32[4])
func (_FilesData *FilesDataFilterer) WatchOnSetFileDesc(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetFileDesc) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetFileDesc")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetFileDesc)
				if err := _FilesData.contract.UnpackLog(event, "onSetFileDesc", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetFileTypeIterator is returned from FilterOnSetFileType and is used to iterate over the raw logs and unpacked data for OnSetFileType events raised by the FilesData contract.
type FilesDataOnSetFileTypeIterator struct {
	Event *FilesDataOnSetFileType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetFileTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetFileType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetFileType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetFileTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetFileTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetFileType represents a OnSetFileType event raised by the FilesData contract.
type FilesDataOnSetFileType struct {
	Uuid     [16]byte
	FileType [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnSetFileType is a free log retrieval operation binding the contract event 0x0f5d2a1fd7e620b5060ef0c66774a0475af737bef138fc169dfa8aca450e3899.
//
// Solidity: e onSetFileType(uuid bytes16, fileType bytes32)
func (_FilesData *FilesDataFilterer) FilterOnSetFileType(opts *bind.FilterOpts) (*FilesDataOnSetFileTypeIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetFileType")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetFileTypeIterator{contract: _FilesData.contract, event: "onSetFileType", logs: logs, sub: sub}, nil
}

// WatchOnSetFileType is a free log subscription operation binding the contract event 0x0f5d2a1fd7e620b5060ef0c66774a0475af737bef138fc169dfa8aca450e3899.
//
// Solidity: e onSetFileType(uuid bytes16, fileType bytes32)
func (_FilesData *FilesDataFilterer) WatchOnSetFileType(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetFileType) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetFileType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetFileType)
				if err := _FilesData.contract.UnpackLog(event, "onSetFileType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetOwnerUuidIterator is returned from FilterOnSetOwnerUuid and is used to iterate over the raw logs and unpacked data for OnSetOwnerUuid events raised by the FilesData contract.
type FilesDataOnSetOwnerUuidIterator struct {
	Event *FilesDataOnSetOwnerUuid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetOwnerUuidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetOwnerUuid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetOwnerUuid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetOwnerUuidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetOwnerUuidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetOwnerUuid represents a OnSetOwnerUuid event raised by the FilesData contract.
type FilesDataOnSetOwnerUuid struct {
	Uuid      [16]byte
	OwnerUuid [16]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOnSetOwnerUuid is a free log retrieval operation binding the contract event 0x82e7473892dc1da52c17ad55ae9ce073d7e153c1313b43a75527e983c42f9c66.
//
// Solidity: e onSetOwnerUuid(uuid bytes16, ownerUuid bytes16)
func (_FilesData *FilesDataFilterer) FilterOnSetOwnerUuid(opts *bind.FilterOpts) (*FilesDataOnSetOwnerUuidIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetOwnerUuid")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetOwnerUuidIterator{contract: _FilesData.contract, event: "onSetOwnerUuid", logs: logs, sub: sub}, nil
}

// WatchOnSetOwnerUuid is a free log subscription operation binding the contract event 0x82e7473892dc1da52c17ad55ae9ce073d7e153c1313b43a75527e983c42f9c66.
//
// Solidity: e onSetOwnerUuid(uuid bytes16, ownerUuid bytes16)
func (_FilesData *FilesDataFilterer) WatchOnSetOwnerUuid(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetOwnerUuid) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetOwnerUuid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetOwnerUuid)
				if err := _FilesData.contract.UnpackLog(event, "onSetOwnerUuid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetTimeIterator is returned from FilterOnSetTime and is used to iterate over the raw logs and unpacked data for OnSetTime events raised by the FilesData contract.
type FilesDataOnSetTimeIterator struct {
	Event *FilesDataOnSetTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetTime represents a OnSetTime event raised by the FilesData contract.
type FilesDataOnSetTime struct {
	Uuid [16]byte
	Time *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnSetTime is a free log retrieval operation binding the contract event 0x50843b091ea0bec4b6ead7f725b4fcb769671b6948c77b9cd98b25ff2440d84c.
//
// Solidity: e onSetTime(uuid bytes16, time uint256)
func (_FilesData *FilesDataFilterer) FilterOnSetTime(opts *bind.FilterOpts) (*FilesDataOnSetTimeIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetTime")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetTimeIterator{contract: _FilesData.contract, event: "onSetTime", logs: logs, sub: sub}, nil
}

// WatchOnSetTime is a free log subscription operation binding the contract event 0x50843b091ea0bec4b6ead7f725b4fcb769671b6948c77b9cd98b25ff2440d84c.
//
// Solidity: e onSetTime(uuid bytes16, time uint256)
func (_FilesData *FilesDataFilterer) WatchOnSetTime(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetTime) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetTime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetTime)
				if err := _FilesData.contract.UnpackLog(event, "onSetTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// FilesDataOnSetUploaderUuidIterator is returned from FilterOnSetUploaderUuid and is used to iterate over the raw logs and unpacked data for OnSetUploaderUuid events raised by the FilesData contract.
type FilesDataOnSetUploaderUuidIterator struct {
	Event *FilesDataOnSetUploaderUuid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesDataOnSetUploaderUuidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesDataOnSetUploaderUuid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesDataOnSetUploaderUuid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesDataOnSetUploaderUuidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesDataOnSetUploaderUuidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesDataOnSetUploaderUuid represents a OnSetUploaderUuid event raised by the FilesData contract.
type FilesDataOnSetUploaderUuid struct {
	Uuid         [16]byte
	UploaderUuid [16]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOnSetUploaderUuid is a free log retrieval operation binding the contract event 0xd8aaf341152319250a5bbe3f879ed37a1710d2b5dfa9676f68e9bfb98e3de630.
//
// Solidity: e onSetUploaderUuid(uuid bytes16, uploaderUuid bytes16)
func (_FilesData *FilesDataFilterer) FilterOnSetUploaderUuid(opts *bind.FilterOpts) (*FilesDataOnSetUploaderUuidIterator, error) {

	logs, sub, err := _FilesData.contract.FilterLogs(opts, "onSetUploaderUuid")
	if err != nil {
		return nil, err
	}
	return &FilesDataOnSetUploaderUuidIterator{contract: _FilesData.contract, event: "onSetUploaderUuid", logs: logs, sub: sub}, nil
}

// WatchOnSetUploaderUuid is a free log subscription operation binding the contract event 0xd8aaf341152319250a5bbe3f879ed37a1710d2b5dfa9676f68e9bfb98e3de630.
//
// Solidity: e onSetUploaderUuid(uuid bytes16, uploaderUuid bytes16)
func (_FilesData *FilesDataFilterer) WatchOnSetUploaderUuid(opts *bind.WatchOpts, sink chan<- *FilesDataOnSetUploaderUuid) (event.Subscription, error) {

	logs, sub, err := _FilesData.contract.WatchLogs(opts, "onSetUploaderUuid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesDataOnSetUploaderUuid)
				if err := _FilesData.contract.UnpackLog(event, "onSetUploaderUuid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
